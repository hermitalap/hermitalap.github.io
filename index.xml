<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>imzifeng</title>
        <link>http://imzifeng.cn/</link>
        <description>无名的自留地.</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 16 Sep 2021 21:11:43 &#43;0800</lastBuildDate>
            <atom:link href="http://imzifeng.cn/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>mermaid</title>
    <link>http://imzifeng.cn/posts/mermaid/</link>
    <pubDate>Thu, 16 Sep 2021 21:11:43 &#43;0800</pubDate><author>
        <name>zifeng</name>
    </author><guid>http://imzifeng.cn/posts/mermaid/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/featured.png" referrerpolicy="no-referrer">
            </div><h2 id="关于mermaid">关于mermaid</h2>
<p><strong>Mermaid 可让您使用文本和代码创建图表和可视化效果。</strong></p>
<p>它是一种基于 Javascript 的图表和图表工具，可呈现受 Markdown 启发的文本定义以动态创建和修改图表。
现已在大量支持markdown语法的程序中得到支持，包括Obsidian和Hugo。</p>
<blockquote>
<p>如果您熟悉 Markdown，那么学习<a href="https://mermaid-js.github.io/mermaid/#/./n00b-syntaxReference" target="_blank" rel="noopener noreffer">Mermaid&rsquo;s Syntax</a>应该没有问题。</p>
</blockquote>
<h2 id="流程图">流程图</h2>
<h3 id="基本流程图">基本流程图</h3>
<div class="mermaid" id="id-1"></div>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">graph TD;
    A--&gt;B;
    A--&gt;C;
    B--&gt;D;
    C--&gt;D;
</code></pre></td></tr></table>
</div>
</div><h3 id="方向">方向</h3>
<p>可能的流程图方向是：</p>
<ul>
<li>TB/TD - 从上到下</li>
<li>BT - 自下而上</li>
<li>RL - 从右到左</li>
<li>LR - 从左到右</li>
</ul>
<h3 id="更多形状">更多形状</h3>
<h4 id="节点形状条件">节点形状、条件</h4>
<div class="mermaid" id="id-2"></div>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">graph LR
A[方形] --&gt;B(圆角)
    B --&gt; C{条件a}
    C --&gt;|a=1| D[结果1]
    C --&gt;|a=2| E[结果2]
    F[横向流程图]
</code></pre></td></tr></table>
</div>
</div><h4 id="子图">子图</h4>
<div class="mermaid" id="id-3"></div>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">flowchart TB
    c1--&gt;a2
    subgraph one
    a1--&gt;a2
    end
    subgraph two
    b1--&gt;b2
    end
    subgraph three
    c1--&gt;c2
    end
</code></pre></td></tr></table>
</div>
</div><h3 id="完整文档">完整文档</h3>
<ul>
<li><a href="https://mermaid-js.github.io/mermaid/#/flowchart?id=graph" title="图形" target="_blank" rel="noopener noreffer">图形</a></li>
<li><a href="https://mermaid-js.github.io/mermaid/#/flowchart?id=flowchart-orientation" title="流程图方向" target="_blank" rel="noopener noreffer">流程图方向</a></li>
<li><a href="https://mermaid-js.github.io/mermaid/#/flowchart?id=node-shapes" title="节点形状" target="_blank" rel="noopener noreffer">节点形状</a></li>
<li><a href="https://mermaid-js.github.io/mermaid/#/flowchart?id=links-between-nodes" title="节点之间的链接" target="_blank" rel="noopener noreffer">节点之间的链接</a></li>
<li><a href="https://mermaid-js.github.io/mermaid/#/flowchart?id=special-characters-that-break-syntax" title="破坏语法的特殊字符" target="_blank" rel="noopener noreffer">破坏语法的特殊字符</a></li>
<li><a href="https://mermaid-js.github.io/mermaid/#/flowchart?id=subgraphs" title="子图" target="_blank" rel="noopener noreffer">子图</a></li>
<li><a href="https://mermaid-js.github.io/mermaid/#/flowchart?id=beta-flowcharts" title="测试版：流程图" target="_blank" rel="noopener noreffer">测试版：流程图</a></li>
<li><a href="https://mermaid-js.github.io/mermaid/#/flowchart?id=direction-in-subgraphs" title="子图中的方向" target="_blank" rel="noopener noreffer">子图中的方向</a></li>
<li><a href="https://mermaid-js.github.io/mermaid/#/flowchart?id=interaction" title="相互作用" target="_blank" rel="noopener noreffer">相互作用</a></li>
<li><a href="https://mermaid-js.github.io/mermaid/#/flowchart?id=styling-and-classes" title="样式和类" target="_blank" rel="noopener noreffer">样式和类</a></li>
<li><a href="https://mermaid-js.github.io/mermaid/#/flowchart?id=basic-support-for-fontawesome" title="对 fontawesome 的基本支持" target="_blank" rel="noopener noreffer">对 fontawesome 的基本支持</a></li>
<li><a href="https://mermaid-js.github.io/mermaid/#/flowchart?id=graph-declarations-with-spaces-between-vertices-and-link-and-without-semicolon" title="顶点和链接之间有空格且没有分号的图形声明" target="_blank" rel="noopener noreffer">顶点和链接之间有空格且没有分号的图形声明</a></li>
<li><a href="https://mermaid-js.github.io/mermaid/#/flowchart?id=configuration" title="配置..." target="_blank" rel="noopener noreffer">配置&hellip;</a></li>
</ul>
<h2 id="饼图">饼图</h2>
<div class="mermaid" id="id-4"></div>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">pie
    title Key elements in Product X
    &#34;Calcium&#34; : 42.96
    &#34;Potassium&#34; : 50.05
    &#34;Magnesium&#34; : 10.01
    &#34;Iron&#34; :  5
</code></pre></td></tr></table>
</div>
</div><h2 id="状态图">状态图</h2>
<blockquote>
<p>“状态图是一种用于计算机科学和相关领域的图，用于描述系统的行为。状态图要求所描述的系统由有限数量的状态组成；有时情况确实如此，而在其他情况下有时这是一个合理的抽象。” ——维基百科</p>
</blockquote>
<h3 id="基本状态图">基本状态图</h3>
<div class="mermaid" id="id-5"></div>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">stateDiagram-v2
    [*] --&gt; Still
    Still --&gt; [*]

    Still --&gt; Moving
    Moving --&gt; Still
    Moving --&gt; Crash
    Crash --&gt; [*]
</code></pre></td></tr></table>
</div>
</div><h3 id="层级">层级</h3>
<div class="mermaid" id="id-6"></div>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">stateDiagram
    direction LR
    [*] --&gt; A
    A --&gt; B
    B --&gt; C
    state B {
      direction LR
      a --&gt; b
    }
    B --&gt; D
</code></pre></td></tr></table>
</div>
</div><h3 id="选择">选择</h3>
<p>有时您需要对两个或多个路径之间的选择进行建模，您可以使用 <code>&lt;&lt;choice&gt;&gt; </code>来实现。</p>
<div class="mermaid" id="id-7"></div>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">stateDiagram-v2
    state if_state &lt;&lt;choice&gt;&gt;
    [*] --&gt; IsPositive
    IsPositive --&gt; if_state
    if_state --&gt; False: if n &lt; 0
    if_state --&gt; True : if n &gt;= 0
</code></pre></td></tr></table>
</div>
</div><h3 id="便利贴">便利贴</h3>
<p>有时，没有什么比便利贴更能说明问题了。在状态图中也是如此。</p>
<p>在这里您可以选择将注释放在节点的右侧或左侧。
<div class="mermaid" id="id-8"></div></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">stateDiagram-v2
	State1: The state with a note
	note right of State1
		Important information! You can write
		notes.
	end note
	State1 --&gt; State2
	note left of State2 : This is the note to the left.
</code></pre></td></tr></table>
</div>
</div><h3 id="完整文档-1">完整文档</h3>
<ul>
<li><a href="https://mermaid-js.github.io/mermaid/#/stateDiagram?id=states" title="状态" target="_blank" rel="noopener noreffer">状态</a></li>
<li><a href="https://mermaid-js.github.io/mermaid/#/stateDiagram?id=transitions" title="过渡" target="_blank" rel="noopener noreffer">过渡</a></li>
<li><a href="https://mermaid-js.github.io/mermaid/#/stateDiagram?id=start-and-end" title="开始和结束" target="_blank" rel="noopener noreffer">开始和结束</a></li>
<li><a href="https://mermaid-js.github.io/mermaid/#/stateDiagram?id=composite-states" title="复合状态" target="_blank" rel="noopener noreffer">复合状态</a></li>
<li><a href="https://mermaid-js.github.io/mermaid/#/stateDiagram?id=choice" title="选择" target="_blank" rel="noopener noreffer">选择</a></li>
<li><a href="https://mermaid-js.github.io/mermaid/#/stateDiagram?id=forks" title="货叉" target="_blank" rel="noopener noreffer">分支</a></li>
<li><a href="https://mermaid-js.github.io/mermaid/#/stateDiagram?id=notes" title="笔记" target="_blank" rel="noopener noreffer">笔记</a></li>
<li><a href="https://mermaid-js.github.io/mermaid/#/stateDiagram?id=concurrency" title="并发" target="_blank" rel="noopener noreffer">并发</a></li>
<li><a href="https://mermaid-js.github.io/mermaid/#/stateDiagram?id=setting-the-direction-of-the-diagram" title="设置图表的方向" target="_blank" rel="noopener noreffer">设置图表的方向</a></li>
<li><a href="https://mermaid-js.github.io/mermaid/#/stateDiagram?id=comments" title="注释" target="_blank" rel="noopener noreffer">注释</a></li>
<li><a href="https://mermaid-js.github.io/mermaid/#/stateDiagram?id=styling" title="造型" target="_blank" rel="noopener noreffer">风格</a></li>
</ul>
<h2 id="甘特图">甘特图</h2>
<blockquote>
<p>甘特图是一种条形图，由 Karol Adamiecki 于 1896 年首次开发，1910 年代由 Henry Gantt 独立开发，用于说明项目进度和完成任何项目所需的时间。甘特图说明项目的终端元素和摘要元素的开始日期和完成日期之间的天数。</p>
</blockquote>
<p>甘特图将每个计划任务记录为一个从左向右延伸的连续条。x 轴代表时间，y 轴记录不同的任务及其完成的顺序。</p>
<p>重要的是要记住，当特定于任务的日期、日期或日期集合被“排除”时，甘特图将通过向右扩展相同的天数来适应这些更改，而不是通过在内部创建间隙任务。</p>
<p>但是，如果排除的日期在两个设置为连续开始的任务之间，则排除的日期将被图形跳过并留空，并且在排除的日期结束后将开始下一个任务。</p>
<p>甘特图可用于跟踪项目完成前所需的时间，但它也可用于以图形方式表示“非工作日”，只需稍作调整。</p>
<p>Mermaid 可以将甘特图呈现为 SVG、PNG 或可以粘贴到文档中的 MarkDown 链接。</p>
<h3 id="基本甘特图">基本甘特图</h3>
<div class="mermaid" id="id-9"></div>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">gantt
    title A Gantt Diagram
    dateFormat  YYYY-MM-DD
    section Section
    A task           :a1, 2021-01-01, 30d
    Another task     :after a1  , 20d
    section Another
    Task in sec      :2021-01-12  , 12d
    another task      : 24d
</code></pre></td></tr></table>
</div>
</div><h3 id="语法">语法</h3>
<div class="mermaid" id="id-10"></div>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="n">gantt</span><span class="w">
</span><span class="w">    </span><span class="n">dateFormat</span><span class="w">  </span><span class="n">YYYY</span><span class="o">-</span><span class="n">MM</span><span class="o">-</span><span class="n">DD</span><span class="w">
</span><span class="w">    </span><span class="n">title</span><span class="w">       </span><span class="n">Adding</span><span class="w"> </span><span class="n">GANTT</span><span class="w"> </span><span class="n">diagram</span><span class="w"> </span><span class="n">functionality</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="n">mermaid</span><span class="w">
</span><span class="w">    </span><span class="n">excludes</span><span class="w">    </span><span class="n">weekends</span><span class="w">
</span><span class="w">    </span><span class="o">%%</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">excludes</span><span class="o">`</span><span class="w"> </span><span class="n">accepts</span><span class="w"> </span><span class="k">specific</span><span class="w"> </span><span class="n">dates</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">YYYY</span><span class="o">-</span><span class="n">MM</span><span class="o">-</span><span class="n">DD</span><span class="w"> </span><span class="n">format</span><span class="p">,</span><span class="w"> </span><span class="n">days</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="nf">week</span><span class="w"> </span><span class="p">(</span><span class="s2">&#34;sunday&#34;</span><span class="p">)</span><span class="w"> </span><span class="k">or</span><span class="w"> </span><span class="s2">&#34;weekends&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">but</span><span class="w"> </span><span class="k">not</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">word</span><span class="w"> </span><span class="s2">&#34;weekdays&#34;</span><span class="p">.)</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="n">section</span><span class="w"> </span><span class="n">A</span><span class="w"> </span><span class="n">section</span><span class="w">
</span><span class="w">    </span><span class="n">Completed</span><span class="w"> </span><span class="n">task</span><span class="w">            </span><span class="p">:</span><span class="n">done</span><span class="p">,</span><span class="w">    </span><span class="n">des1</span><span class="p">,</span><span class="w"> </span><span class="mi">2014</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2014</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">08</span><span class="w">
</span><span class="w">    </span><span class="n">Active</span><span class="w"> </span><span class="n">task</span><span class="w">               </span><span class="p">:</span><span class="n">active</span><span class="p">,</span><span class="w">  </span><span class="n">des2</span><span class="p">,</span><span class="w"> </span><span class="mi">2014</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">09</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="n">d</span><span class="w">
</span><span class="w">    </span><span class="n">Future</span><span class="w"> </span><span class="n">task</span><span class="w">               </span><span class="p">:</span><span class="w">         </span><span class="n">des3</span><span class="p">,</span><span class="w"> </span><span class="n">after</span><span class="w"> </span><span class="n">des2</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="n">d</span><span class="w">
</span><span class="w">    </span><span class="n">Future</span><span class="w"> </span><span class="n">task2</span><span class="w">              </span><span class="p">:</span><span class="w">         </span><span class="n">des4</span><span class="p">,</span><span class="w"> </span><span class="n">after</span><span class="w"> </span><span class="n">des3</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="n">d</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="n">section</span><span class="w"> </span><span class="n">Critical</span><span class="w"> </span><span class="n">tasks</span><span class="w">
</span><span class="w">    </span><span class="n">Completed</span><span class="w"> </span><span class="n">task</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">critical</span><span class="w"> </span><span class="n">line</span><span class="w"> </span><span class="p">:</span><span class="n">crit</span><span class="p">,</span><span class="w"> </span><span class="n">done</span><span class="p">,</span><span class="w"> </span><span class="mi">2014</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">24</span><span class="n">h</span><span class="w">
</span><span class="w">    </span><span class="n">Implement</span><span class="w"> </span><span class="n">parser</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="n">jison</span><span class="w">          </span><span class="p">:</span><span class="n">crit</span><span class="p">,</span><span class="w"> </span><span class="n">done</span><span class="p">,</span><span class="w"> </span><span class="n">after</span><span class="w"> </span><span class="n">des1</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="n">d</span><span class="w">
</span><span class="w">    </span><span class="k">Create</span><span class="w"> </span><span class="n">tests</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">parser</span><span class="w">             </span><span class="p">:</span><span class="n">crit</span><span class="p">,</span><span class="w"> </span><span class="n">active</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="n">d</span><span class="w">
</span><span class="w">    </span><span class="n">Future</span><span class="w"> </span><span class="n">task</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">critical</span><span class="w"> </span><span class="n">line</span><span class="w">        </span><span class="p">:</span><span class="n">crit</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="n">d</span><span class="w">
</span><span class="w">    </span><span class="k">Create</span><span class="w"> </span><span class="n">tests</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">renderer</span><span class="w">           </span><span class="p">:</span><span class="mi">2</span><span class="n">d</span><span class="w">
</span><span class="w">    </span><span class="k">Add</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="n">mermaid</span><span class="w">                      </span><span class="p">:</span><span class="mi">1</span><span class="n">d</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="n">section</span><span class="w"> </span><span class="n">Documentation</span><span class="w">
</span><span class="w">    </span><span class="k">Describe</span><span class="w"> </span><span class="n">gantt</span><span class="w"> </span><span class="n">syntax</span><span class="w">               </span><span class="p">:</span><span class="n">active</span><span class="p">,</span><span class="w"> </span><span class="n">a1</span><span class="p">,</span><span class="w"> </span><span class="n">after</span><span class="w"> </span><span class="n">des1</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="n">d</span><span class="w">
</span><span class="w">    </span><span class="k">Add</span><span class="w"> </span><span class="n">gantt</span><span class="w"> </span><span class="n">diagram</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="n">demo</span><span class="w"> </span><span class="n">page</span><span class="w">      </span><span class="p">:</span><span class="n">after</span><span class="w"> </span><span class="n">a1</span><span class="w">  </span><span class="p">,</span><span class="w"> </span><span class="mi">20</span><span class="n">h</span><span class="w">
</span><span class="w">    </span><span class="k">Add</span><span class="w"> </span><span class="n">another</span><span class="w"> </span><span class="n">diagram</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="n">demo</span><span class="w"> </span><span class="n">page</span><span class="w">    </span><span class="p">:</span><span class="n">doc1</span><span class="p">,</span><span class="w"> </span><span class="n">after</span><span class="w"> </span><span class="n">a1</span><span class="w">  </span><span class="p">,</span><span class="w"> </span><span class="mi">48</span><span class="n">h</span><span class="w">
</span><span class="w">
</span><span class="w">    </span><span class="n">section</span><span class="w"> </span><span class="n">Last</span><span class="w"> </span><span class="n">section</span><span class="w">
</span><span class="w">    </span><span class="k">Describe</span><span class="w"> </span><span class="n">gantt</span><span class="w"> </span><span class="n">syntax</span><span class="w">               </span><span class="p">:</span><span class="n">after</span><span class="w"> </span><span class="n">doc1</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="n">d</span><span class="w">
</span><span class="w">    </span><span class="k">Add</span><span class="w"> </span><span class="n">gantt</span><span class="w"> </span><span class="n">diagram</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="n">demo</span><span class="w"> </span><span class="n">page</span><span class="w">      </span><span class="p">:</span><span class="mi">20</span><span class="n">h</span><span class="w">
</span><span class="w">    </span><span class="k">Add</span><span class="w"> </span><span class="n">another</span><span class="w"> </span><span class="n">diagram</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="n">demo</span><span class="w"> </span><span class="n">page</span><span class="w">    </span><span class="p">:</span><span class="mi">48</span><span class="n">h</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="完整文档-2">完整文档</h3>
<ul>
<li><a href="https://mermaid-js.github.io/mermaid/#/gantt?id=a-note-to-users" title="给用户的注意事项" target="_blank" rel="noopener noreffer">给用户的注意事项</a></li>
<li><a href="https://mermaid-js.github.io/mermaid/#/gantt?id=syntax" title="句法" target="_blank" rel="noopener noreffer">语法</a></li>
<li><a href="https://mermaid-js.github.io/mermaid/#/gantt?id=setting-dates" title="设置日期" target="_blank" rel="noopener noreffer">设置日期</a></li>
<li><a href="https://mermaid-js.github.io/mermaid/#/gantt?id=comments" title="注释" target="_blank" rel="noopener noreffer">注释</a></li>
<li><a href="https://mermaid-js.github.io/mermaid/#/gantt?id=styling" title="造型" target="_blank" rel="noopener noreffer">风格</a></li>
<li><a href="https://mermaid-js.github.io/mermaid/#/gantt?id=today-marker" title="今天标记" target="_blank" rel="noopener noreffer">当前日期标记</a></li>
<li><a href="https://mermaid-js.github.io/mermaid/#/gantt?id=configuration" title="配置" target="_blank" rel="noopener noreffer">配置</a></li>
<li><a href="https://mermaid-js.github.io/mermaid/#/gantt?id=interaction" title="相互作用" target="_blank" rel="noopener noreffer">交互</a></li>
</ul>
<h2 id="更多图表">更多图表</h2>
<h3 id="时序图">时序图</h3>
<blockquote>
<p>时序图是一种交互图，它显示了进程如何相互操作以及以何种顺序运行。</p>
</blockquote>
<div class="mermaid" id="id-11"></div>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">sequenceDiagram
    Alice-&gt;&gt;John: Hello John, how are you?
    John--&gt;&gt;Alice: Great!
    Alice-)John: See you later!
</code></pre></td></tr></table>
</div>
</div><p><a href="https://mermaid-js.github.io/mermaid/#/sequenceDiagram" target="_blank" rel="noopener noreffer">完整文档</a></p>
<h3 id="类图">类图</h3>
<blockquote>
<p>“在软件工程中，统一建模语言（UML）中的类图是一种静态结构图，它通过显示系统的类、它们的属性、操作（或方法）以及对象之间的关系来描述系统的结构.” ——维基百科</p>
</blockquote>
<div class="mermaid" id="id-12"></div>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">classDiagram
      Animal &lt;|-- Duck
      Animal &lt;|-- Fish
      Animal &lt;|-- Zebra
      Animal : +int age
      Animal : +String gender
      Animal: +isMammal()
      Animal: +mate()
      class Duck{
          +String beakColor
          +swim()
          +quack()
      }
      class Fish{
          -int sizeInFeet
          -canEat()
      }
      class Zebra{
          +bool is_wild
          +run()
      }
</code></pre></td></tr></table>
</div>
</div><p><a href="https://mermaid-js.github.io/mermaid/#/classDiagram" target="_blank" rel="noopener noreffer">完整文档</a></p>
<h3 id="实体关系图">实体关系图</h3>
<blockquote>
<p>实体-关系模型（或 ER 模型）描述了特定知识领域中的相关事物。基本 ER 模型由实体类型（对感兴趣的事物进行分类）组成，并指定实体（这些实体类型的实例）之间可以存在的关系。——维基百科</p>
</blockquote>
<div class="mermaid" id="id-13"></div>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">erDiagram
    CUSTOMER ||--o{ ORDER : places
    ORDER ||--|{ LINE-ITEM : contains
    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses
</code></pre></td></tr></table>
</div>
</div><p><a href="https://mermaid-js.github.io/mermaid/#/entityRelationshipDiagram" target="_blank" rel="noopener noreffer">完整文档</a></p>
<h3 id="用户旅程图">用户旅程图</h3>
<blockquote>
<p>用户旅程高度详细地描述了不同用户在系统、应用程序或网站中完成特定任务所采取的具体步骤。此技术显示当前（原样）用户工作流程，并揭示未来工作流程的改进领域。——维基百科</p>
</blockquote>
<div class="mermaid" id="id-14"></div>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">erDiagram
    CUSTOMER ||--o{ ORDER : places
    ORDER ||--|{ LINE-ITEM : contains
    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses
</code></pre></td></tr></table>
</div>
</div><p><a href="https://mermaid-js.github.io/mermaid/#/user-journey" target="_blank" rel="noopener noreffer">完整文档</a></p>
<h3 id="需求图">需求图</h3>
<blockquote>
<p>需求图提供了需求及其相互之间和其他文档化元素之间的联系的可视化。建模规范遵循 SysML v1.6 定义的规范。</p>
</blockquote>
<div class="mermaid" id="id-15"></div>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">requirementDiagram

    requirement test_req {
    id: 1
    text: the test text.
    risk: high
    verifymethod: test
    }

    element test_entity {
    type: simulation
    }

    test_entity - satisfies -&gt; test_req
</code></pre></td></tr></table>
</div>
</div><p><a href="https://mermaid-js.github.io/mermaid/#/requirementDiagram" target="_blank" rel="noopener noreffer">完整文档</a></p>
<h2 id="mermaid官网httpsmermaid-jsgithubiomermaid"><a href="https://mermaid-js.github.io/mermaid/#/" target="_blank" rel="noopener noreffer">mermaid官网</a></h2>
<h2 id="适用于在obsidian打开的本文章md文件">适用于在Obsidian打开的本文章md文件</h2>
<p><a href="./markdown.md.save" rel="">下载地址</a>(请自行删除后缀名.save)</p>
]]></description>
</item><item>
    <title>U盘不完全防毒</title>
    <link>http://imzifeng.cn/posts/usbflashdiskantivirus/</link>
    <pubDate>Sat, 04 Sep 2021 16:33:34 &#43;0800</pubDate><author>
        <name>zifeng</name>
    </author><guid>http://imzifeng.cn/posts/usbflashdiskantivirus/</guid>
    <description><![CDATA[<h2 id="前言">前言</h2>
<p>最近实验室出现大量U盘感染事件，不少师兄师姐珍贵的实验数据灰飞烟灭，因为显微镜室的电脑并未联网，所需每次进行镜检后使用U盘拷贝是必须的步骤。加上显微镜室的电脑还有其他实验室的在使用，众多使用者的U盘很容易出现交叉感染的情况。</p>
<p>现将本人收集的除了安装杀毒软件以外的U盘防毒方法整理如下</p>
<h3 id="使用带有写保护功能的u盘">使用带有写保护功能的U盘</h3>
<p>病毒植入U盘必然伴随着写入，带有硬件写保护功能的U盘能够有效防御学校打印店，公共演示电脑上带有的病毒。可以说是目前唯一能够100%防御病毒的方法，缺点是但是款式较少，且主要面向商务用户，价格较高。且不适用于需要向U盘内拷贝文件的场合。</p>
<h3 id="关闭自动播放功能">关闭自动播放功能</h3>
<p>部分U盘病毒的传播方法是伪造autorun.inf文件，该文件定义了硬件被接入电脑后会以何种方式自动运行哪个程序，打开自动播放可能会导致病毒程序被系统自动运行。
以win10为例，依次打开设置-&gt;设备-&gt;自动播放-&gt;关闭自动播放
<figure><a class="lightgallery" href="/posts/usbflashdiskantivirus/Pasted%20image%2020210904154551.png" title="/posts/usbflashdiskantivirus/Pasted%20image%2020210904154551.png" data-thumbnail="/posts/usbflashdiskantivirus/Pasted%20image%2020210904154551.png" data-sub-html="<h2>设置-&gt;设备-&gt;自动播放-&gt;关闭自动播放</h2>">
        
    </a><figcaption class="image-caption">设置->设备->自动播放->关闭自动播放</figcaption>
    </figure></p>
<h3 id="构建不可修改的autoruninf">构建不可修改的autorun.inf</h3>
<p>即便是关闭了自动播放，在资源管理器双击U盘图标时，系统也会按照autorun.inf中的指示自动运行病毒程序，所以安全的做法是右键U盘图标然后点击“打开”，并注意是否有可疑的自动播放选项。考虑到使用个人U盘的过程中很少会用到autorun.inf，所以我们可以创建一个不可被病毒程序修改的“autorun.inf”来抵御所有依赖这种传播方式的病毒。</p>
<p>我在网上看到有人说，“既然病毒需要使用autorun.inf，那我们预先创建一个autorun.inf，病毒就无法传播了”，这完全是来搞笑的，凭什么你会觉得病毒不会覆盖或者删除原有的antorun.inf文件？不过这个馊主意也给了我一些灵感，经过尝试和使用一些骚操作，我还是实现对autorun.inf的被动防御。</p>
<p>这里主要运用了两种机制</p>
<ul>
<li>windows下，同一目录下不可出现相同名称的文件和文件夹</li>
<li>如果目录下存在畸形目录，那么父目录不可被删除。</li>
</ul>
<p>首先在U盘根目录下创建“autorun.inf”文件夹，当这个文件夹存在的时候，病毒就无法创建“autorun.inf”文件了
<figure><a class="lightgallery" href="/posts/usbflashdiskantivirus/Pasted%20image%2020210904161411.png" title="/posts/usbflashdiskantivirus/Pasted%20image%2020210904161411.png" data-thumbnail="/posts/usbflashdiskantivirus/Pasted%20image%2020210904161411.png" data-sub-html="<h2>windows下，同一目录下不可出现相同名称的文件和文件夹</h2>">
        
    </a><figcaption class="image-caption">windows下，同一目录下不可出现相同名称的文件和文件夹</figcaption>
    </figure>
但是病毒可能会删除这个文件夹，所以我们要让这个文件夹不可被删除。
首先进入“autorun.inf”文件夹，右键，点击“在终端/cmd中打开”，你也可以说win+r，输入cmd后回车，然后手动cd到U盘的这个目录下。然后</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">D:<span class="se">\a</span>utorun.inf&gt;md imzifeng.cn..<span class="se">\
</span></code></pre></td></tr></table>
</div>
</div><p>在该目录下创建一个文件夹，在任意名称的后面跟上两个或多个点（.）,这种带有两个或多个点的目录就是一个畸形目录，它无法通过常规方法删除
<figure><a class="lightgallery" href="/posts/usbflashdiskantivirus/Pasted%20image%2020210904161957.png" title="/posts/usbflashdiskantivirus/Pasted%20image%2020210904161957.png" data-thumbnail="/posts/usbflashdiskantivirus/Pasted%20image%2020210904161957.png" data-sub-html="<h2>常规删除方法</h2>">
        
    </a><figcaption class="image-caption">常规删除方法</figcaption>
    </figure>
<figure><a class="lightgallery" href="/posts/usbflashdiskantivirus/Pasted%20image%2020210904162005.png" title="/posts/usbflashdiskantivirus/Pasted%20image%2020210904162005.png" data-thumbnail="/posts/usbflashdiskantivirus/Pasted%20image%2020210904162005.png" data-sub-html="<h2>无法删除</h2>">
        
    </a><figcaption class="image-caption">无法删除</figcaption>
    </figure>
同样的，由于它是“autorun.inf”目录的子目录，导致“autorun.inf”也无法正常删除和访问。
<figure><a class="lightgallery" href="/posts/usbflashdiskantivirus/Pasted%20image%2020210904162147.png" title="/posts/usbflashdiskantivirus/Pasted%20image%2020210904162147.png" data-thumbnail="/posts/usbflashdiskantivirus/Pasted%20image%2020210904162147.png" data-sub-html="<h2>无法删除的autorun.inf</h2>">
        
    </a><figcaption class="image-caption">无法删除的autorun.inf</figcaption>
    </figure>
这样就构建了一个不可删除的“autorun.inf”目录</p>
<p>如果之后需要删除，可以在终端中输入</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">D:<span class="se">\a</span>utorun.inf&gt;rd imzifeng.cn..<span class="se">\
</span></code></pre></td></tr></table>
</div>
</div><p>需要注意的是，这个方法只能阻止利用了autorun.inf文件的病毒，现在很多病毒都比较高级，比如把U盘下的文件全部隐藏，然后复刻一个一摸一样的目录，不过把所有文件以及文件夹都替换为exe可执行文件，一点就中招，不过我一般都是开启了显示隐藏文件以及显示文件扩展名。</p>
<h3 id="各类u盘保险箱程序">各类U盘保险箱程序</h3>
<p>治标不治本，还有可能导致重要文件团灭。</p>
<h3 id="反正不是我的电脑">反正不是我的电脑</h3>
<p>拷贝几个杀毒软件的安装包，遇到没有安装杀毒软件的可疑电脑，就给他安排上，然后拔U盘前把U盘查杀一遍。不过这年头，电脑上有好几个杀毒软件炼蛊的一定是小白，但是一个杀毒软件都没装的也可能是高手，所以做好被打的准备。不过装火绒可能被打得轻一点。</p>
]]></description>
</item><item>
    <title>Git</title>
    <link>http://imzifeng.cn/posts/git/</link>
    <pubDate>Wed, 01 Sep 2021 16:36:49 &#43;0800</pubDate><author>
        <name>zifeng</name>
    </author><guid>http://imzifeng.cn/posts/git/</guid>
    <description><![CDATA[<h1 id="git-是一个分布式版本控制系统">Git 是一个分布式版本控制系统.</h1>
<p>文本，脚本，以及各种基于文本信息的文件可被Git管理</p>
<p>各软件私有格式、二进制文件、媒体不可被Git管理</p>
<h2 id="安装">安装</h2>
<p>官方下载地址，<a href="https://git-scm.com/downloads" target="_blank" rel="noopener noreffer">Git</a></p>
<h3 id="gui管理器">GUI管理器</h3>
<p><a href="https://desktop.github.com/" target="_blank" rel="noopener noreffer">GitHub Desktop</a>
<a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener noreffer">Sourcetree</a></p>
<h2 id="基本使用">基本使用</h2>
<h3 id="基本配置">基本配置</h3>
<p>设置个人信息，用于将修改与人对应</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ git config --global user.name &#34;username&#34;
$ git config --global user.email &#34;email@example.com&#34;
</code></pre></td></tr></table>
</div>
</div><h3 id="init创建版本库-repository">(init）创建版本库 Repository</h3>
<p>首先cd到你要管理的文件夹
然后创建</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">git init
<span class="c1"># Initialized empty Git repository in somefoloers/.git/</span>

<span class="c1"># 提示：使用 &#39;master&#39; 作为初始分支的名称。这个默认分支名称可能会更改。要在新仓库中</span>
<span class="c1"># 提示：配置使用初始分支名，并消除这条警告，请执行：</span>
<span class="c1"># 提示：</span>
<span class="c1"># 提示：  git config --global init.defaultBranch &lt;名称&gt;</span>
<span class="c1"># 提示：</span>
<span class="c1"># 提示：除了 &#39;master&#39; 之外，通常选定的名字有 &#39;main&#39;、&#39;trunk&#39; 和 &#39;development&#39;。</span>
<span class="c1"># 提示：可以通过以下命令重命名刚创建的分支：</span>
<span class="c1"># 提示：</span>
<span class="c1"># 提示：  git branch -m &lt;name&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>git 创建的管理库文件 <code>.git</code> 是被隐藏起来的</p>
<h3 id="add添加文件管理">(add）添加文件管理</h3>
<p>建立一个新的 1.py 文件:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ touch first.py
</code></pre></td></tr></table>
</div>
</div><p>现在 <code>first.py</code> 并没有被放入版本库中 (unstaged), 所以我们要使用 <code>add</code> 把它添加进版本库 (staged):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ git add first.py

<span class="c1"># 再次查看状态 status</span>
$ git status
位于分支 master  
  
尚无提交  
  
要提交的变更：  
（使用 <span class="s2">&#34;git rm --cached &lt;文件&gt;...&#34;</span> 以取消暂存）  
新文件： first.py
</code></pre></td></tr></table>
</div>
</div><p>如果想一次性添加文件夹中所有未被添加的文件, 可以使用这个:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ git add .
</code></pre></td></tr></table>
</div>
</div><h3 id="commit提交改变">(commit）提交改变</h3>
<p>我们已经添加好了 <code>first.py</code> 文件, 最后一步就是提交这次的改变, 并在 <code>-m</code> 自定义这次改变的信息:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ git commit -m <span class="s2">&#34;create first.py&#34;</span>

<span class="c1"># 输出</span>
<span class="o">[</span>master（根提交） d722a66<span class="o">]</span> create first.py  
<span class="m">1</span> file changed, <span class="m">0</span> insertions<span class="o">(</span>+<span class="o">)</span>, <span class="m">0</span> deletions<span class="o">(</span>-<span class="o">)</span>  
create mode <span class="m">100644</span> first.py

$ git commit -am <span class="s2">&#34;change 3 in dev&#34;</span> <span class="c1"># &#34;-am&#34;: add 所有改变 并直接 commit</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="log修改记录">(log）修改记录</h3>
<p>查看</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ git log

<span class="c1"># 输出</span>
commit d722a6689063eebd44a4584c07c7bf613520b5d5 <span class="o">(</span>HEAD -&gt; master<span class="o">)</span>  
Author: xxx &lt;xxx@126.com&gt;  
Date: Mon Aug <span class="m">30</span> 21:38:36 <span class="m">2021</span> +0800  

create first.py

$ git log --oneline <span class="c1"># &#34;--oneline&#34;: 每个 commit 内容显示在一行,更简洁，不显示时间</span>

9aeb5f1 <span class="o">(</span>HEAD -&gt; master<span class="o">)</span> create second.py  
d722a66 create first.py
</code></pre></td></tr></table>
</div>
</div><h3 id="diff查看-unstaged">(diff）查看 unstaged</h3>
<p>如果想要查看这次还没 <code>add</code> (unstaged) 的修改部分 和上个已经 <code>commit</code> 的文件有何不同, 我们将使用 <code>$ git diff</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ git diff

<span class="c1"># 输出</span>
diff --git a/first.py b/first.py  
index e69de29..1337a53 <span class="m">100644</span>  
--- a/first.py  
+++ b/first.py  
@@ -0,0 +1 @@  
+a <span class="o">=</span> <span class="m">1</span>
</code></pre></td></tr></table>
</div>
</div><p>注意这里不会显示你还没有追踪的文件，也就是还没有add的文件修改并不会被显示</p>
<h3 id="diff---cached查看-staged">(diff &ndash;cached）查看 staged</h3>
<p>如果你已经 <code>add</code> 了这次修改, 文件变成了 “可提交状态 (staged)”, 我们可以在 <code>diff</code> 中添加参数 <code>--cached</code> 来查看修改:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ git add .   <span class="c1"># add 全部修改文件</span>
$ git diff --cached

<span class="c1"># 输出</span>
diff --git a/1.py b/1.py
index 1337a53..ff7c36c <span class="m">100644</span>
--- a/1.py
+++ b/1.py
@@ -1 +1,2 @@
-a <span class="o">=</span> <span class="m">1</span>
+a <span class="o">=</span> <span class="m">2</span>
+b <span class="o">=</span> <span class="m">1</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="diff-head查看-staged--unstaged">(diff HEAD）查看 staged &amp; unstaged</h3>
<p>显示所有的修改，不管是否为staged（已add）或unstaged（未add）</p>
<p>目前 <code>a = 2</code> 和 <code>b = 1</code> 已被 <code>add</code>, <code>c = b</code> 是新的修改, 还没被 <code>add</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># 对比三种不同 diff 形式</span>
$ git diff HEAD     <span class="c1"># staged &amp; unstaged</span>

@@ -1 +1,3 @@
-a <span class="o">=</span> <span class="m">1</span>  <span class="c1"># 已 staged</span>
+a <span class="o">=</span> <span class="m">2</span>  <span class="c1"># 已 staged</span>
+b <span class="o">=</span> <span class="m">1</span>  <span class="c1"># 已 staged</span>
+c <span class="o">=</span> b  <span class="c1"># 还没 add 去 stage (unstaged)</span>
-----------------------
$ git diff          <span class="c1"># unstaged</span>

@@ -1,2 +1,3 @@
 <span class="nv">a</span> <span class="o">=</span> <span class="m">2</span>  <span class="c1"># 注: 前面没有 +</span>
 <span class="nv">b</span> <span class="o">=</span> <span class="m">1</span>  <span class="c1"># 注: 前面没有 +</span>
+c <span class="o">=</span> b  <span class="c1"># 还没 add 去 stage (unstaged)</span>
-----------------------
$ git diff --cached <span class="c1"># staged</span>

@@ -1 +1,2 @@
-a <span class="o">=</span> <span class="m">1</span>  <span class="c1"># 已 staged</span>
+a <span class="o">=</span> <span class="m">2</span>  <span class="c1"># 已 staged</span>
+b <span class="o">=</span> <span class="m">1</span>  <span class="c1"># 已 staged</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="commit---amend修改已-commit-的版本">(commit &ndash;amend）修改已 commit 的版本</h3>
<p>有时候我们总会忘了什么, 比如已经提交了 <code>commit</code> 却发现在这个 <code>commit</code> 中忘了附上另一个文件. 接下来我们模拟这种情况. 上节内容中, 我们最后一个 <code>commit</code> 是 <code>change 2</code>, 我们将要添加另外一个文件, 将这个修改也 <code>commit</code> 进 <code>change 2</code>. 所以我们复制 <code>1.py</code> 这个文件, 改名为 <code>2.py</code>. 并把 <code>2.py</code> 变成 <code>staged</code>, 然后使用 <code>--amend</code> 将这次改变合并到之前的 <code>change 2</code> 中.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ git add 2.py
$ git commit --amend --no-edit   <span class="c1"># &#34;--no-edit&#34;: 不编辑, 直接合并到上一个 commit</span>
$ git log --oneline    <span class="c1"># &#34;--oneline&#34;: 每个 commit 内容显示在一行</span>

<span class="c1"># 输出</span>
904e1ba change <span class="m">2</span>    <span class="c1"># 合并过的 change 2</span>
c6762a1 change <span class="m">1</span>
13be9a7 create 1.py
</code></pre></td></tr></table>
</div>
</div><h3 id="reset回到unstaged状态">(reset）回到unstaged状态</h3>
<p>有时我们添加 <code>add</code> 了修改, 但是又后悔, 并想补充一些内容再 <code>add</code>. 这时, 我们有一种方式可以回到 <code>add</code> 之前. 比如在 <code>1.py</code> 文件中添加这一行:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">d = 3
</code></pre></td></tr></table>
</div>
</div><p>然后 <code>add</code> 去 <code>staged</code> 再返回到 <code>add</code> 之前:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ git add 1.py
$ git status -s <span class="c1"># &#34;-s&#34;: status 的缩写模式</span>
<span class="c1"># 输出</span>
M  1.py     <span class="c1"># staged，绿色M</span>
-----------------------
$ git reset 1.py
<span class="c1"># 输出</span>
重置后取消暂存的变更：  
M 1.py
-----------------------
$ git status -s
<span class="c1"># 输出</span>
 M 1.py     <span class="c1"># unstaged，红色M</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="reset---hard-xxxxxx回到-commit-之前">(reset &ndash;hard xxxxxx）回到 commit 之前</h3>
<p>在穿梭到过去的 <code>commit</code> 之前, 我们必须了解 git 是如何一步一步累加更改的. 我们截取网上的一些图片</p>
<p><figure><a class="lightgallery" href="/posts/git/Pasted%20image%2020210903164629.png" title="/posts/git/Pasted%20image%2020210903164629.png" data-thumbnail="/posts/git/Pasted%20image%2020210903164629.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"> </figcaption>
    </figure></p>
<p><figure><a class="lightgallery" href="/posts/git/Pasted%20image%2020210903164635.png" title="/posts/git/Pasted%20image%2020210903164635.png" data-thumbnail="/posts/git/Pasted%20image%2020210903164635.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"> </figcaption>
    </figure></p>
<p><figure><a class="lightgallery" href="/posts/git/Pasted%20image%2020210903164641.png" title="/posts/git/Pasted%20image%2020210903164641.png" data-thumbnail="/posts/git/Pasted%20image%2020210903164641.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"> </figcaption>
    </figure></p>
<p><figure><a class="lightgallery" href="/posts/git/Pasted%20image%2020210903164647.png" title="/posts/git/Pasted%20image%2020210903164647.png" data-thumbnail="/posts/git/Pasted%20image%2020210903164647.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"> </figcaption>
    </figure></p>
<p>每个 <code>commit</code> 都有自己的 <code>id</code> 数字号, <code>HEAD</code> 是一个指针, 指引当前的状态是在哪个 <code>commit</code>. 最近的一次 <code>commit</code> 在最右边, 我们如果要回到过去, 就是让 <code>HEAD</code> 回到过去并 <code>reset</code> 此时的 <code>HEAD</code> 到过去的位置.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># 不管我们之前有没有做了一些 add 工作, 这一步让我们回到 上一次的 commit</span>
$ git reset --hard HEAD    
<span class="c1"># 输出</span>
HEAD is now at 904e1ba change <span class="m">2</span>
-----------------------
<span class="c1"># 看看所有的log</span>
$ git log --oneline
<span class="c1"># 输出</span>
904e1ba change <span class="m">2</span>
c6762a1 change <span class="m">1</span>
13be9a7 create 1.py
-----------------------
<span class="c1"># 回到 c6762a1 change 1</span>
<span class="c1"># 方式1: &#34;HEAD^&#34;</span>
$ git reset --hard HEAD^  

<span class="c1"># 方式2: &#34;commit id&#34;</span>
$ git reset --hard c6762a1
-----------------------
<span class="c1"># 看看现在的 log</span>
$ git log --oneline
<span class="c1"># 输出</span>
c6762a1 change <span class="m">1</span>
13be9a7 create 1.py
</code></pre></td></tr></table>
</div>
</div><p>此时回到了<code>change 1</code>, 在此之后的修改都消失了，我们可以查看 <code>$ git reflog</code> 里面最近做的所有 <code>HEAD</code> 的改动, 并选择想要回到的 <code>commit id</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ git reflog
<span class="c1"># 输出</span>
c6762a1 HEAD@<span class="o">{</span>0<span class="o">}</span>: reset: moving to c6762a1
904e1ba HEAD@<span class="o">{</span>1<span class="o">}</span>: commit <span class="o">(</span>amend<span class="o">)</span>: change <span class="m">2</span>
<span class="m">0107760</span> HEAD@<span class="o">{</span>2<span class="o">}</span>: commit: change <span class="m">2</span>
c6762a1 HEAD@<span class="o">{</span>3<span class="o">}</span>: commit: change <span class="m">1</span>
13be9a7 HEAD@<span class="o">{</span>4<span class="o">}</span>: commit <span class="o">(</span>initial<span class="o">)</span>: create 1.py
</code></pre></td></tr></table>
</div>
</div><p>重复 <code>reset</code> 步骤就能回到 <code>commit (amend): change 2</code> (id=904e1ba)这一步了:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ git reset --hard 904e1ba
$ git log --oneline
<span class="c1"># 输出</span>
904e1ba change <span class="m">2</span>
c6762a1 change <span class="m">1</span>
13be9a7 create 1.py
</code></pre></td></tr></table>
</div>
</div><p>我们又再次回到了 <code>change 2</code>.</p>
<h3 id="checkout改写文件">(checkout）改写文件</h3>
<p>其实 <code>checkout</code> 最主要的用途并不是让单个文件回到过去, 我们之后会继续讲 <code>checkout</code> 在分支 <code>branch</code> 中的应用, 这一节主要讲 <code>checkout</code> 让文件回到过去.</p>
<p>我们现在的版本库中有两个文件:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">- gitTUT
    - 1.py
    - 2.py
</code></pre></td></tr></table>
</div>
</div><p>我们仅仅要对 <code>1.py</code> 进行回到过去操作, 回到 <code>c6762a1 change 1</code> 这一个 <code>commit</code>. 使用 <code>checkout</code> + id <code>c6762a1</code> + <code>--</code> + 文件目录 <code>1.py</code>, 我们就能将 <code>1.py</code> 的指针 <code>HEAD</code> 放在这个时刻 <code>c6762a1</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ git log --oneline
<span class="c1"># 输出</span>
904e1ba change <span class="m">2</span>
c6762a1 change <span class="m">1</span>
13be9a7 create 1.py
---------------------
$ git checkout c6762a1 -- 1.py
</code></pre></td></tr></table>
</div>
</div><p>这时 <code>1.py</code> 文件的内容就变成了:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">a = 1
</code></pre></td></tr></table>
</div>
</div><p>我们在 <code>1.py</code> 加上一行内容 <code># I went back to change 1</code> 然后 <code>add</code> 并 <code>commit</code> <code>1.py</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ git add 1.py
$ git commit -m <span class="s2">&#34;back to change 1 and add comment for 1.py&#34;</span>
$ git log --oneline

<span class="c1"># 输出</span>
47f167e back to change <span class="m">1</span> and add comment <span class="k">for</span> 1.py
904e1ba change <span class="m">2</span>
c6762a1 change <span class="m">1</span>
13be9a7 create 1.py
</code></pre></td></tr></table>
</div>
</div><p>可以看出, 不像 <code>reset</code> 时那样, 我们的 <code>change 2</code> 并没有消失, 但是 <code>1.py</code> 却已经回去了过去, 并改写了未来.</p>
<h2 id="分支管理">分支管理</h2>
<h3 id="branch-dev使用branch创建分支">(branch dev）使用branch创建分支</h3>
<p>我们建立另一个分支 <code>dev</code>, 并查看所有分支:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ git branch dev    <span class="c1"># 建立 dev 分支</span>
$ git branch        <span class="c1"># 查看当前分支</span>

<span class="c1"># 输出</span>
  dev       
* master    <span class="c1"># * 代表了当前的 HEAD 所在的分支</span>
</code></pre></td></tr></table>
</div>
</div><p>当我们想把 <code>HEAD</code> 切换去 <code>dev</code> 分支的时候, 我们可以用到上次说的 <code>checkout</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ git checkout dev

<span class="c1"># 输出</span>
Switched to branch <span class="s1">&#39;dev&#39;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="log---oneline---graph使用graph观看分支">(log &ndash;oneline &ndash;graph）使用graph观看分支</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ git branch

<span class="c1"># 输出</span>
* dev       <span class="c1"># 这时 HEAD 已经被切换至 dev 分支</span>
  master
  
$ git log --oneline --graph

<span class="c1"># 输出</span>
* 9f3367b <span class="o">(</span>HEAD -&gt; dev<span class="o">)</span> create dev branch
* 9aeb5f1 <span class="o">(</span>master<span class="o">)</span> create second.py
* d722a66 create first.py
</code></pre></td></tr></table>
</div>
</div><h3 id="checkout--b直接创建并切换到新建的分支">(checkout -b）直接创建并切换到新建的分支</h3>
<p>使用 <code>checkout -b</code> + 分支名, 就能直接创建和切换到新建的分支:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ git checkout -b  dev

<span class="c1"># 输出</span>
Switched to a new branch <span class="s1">&#39;dev&#39;</span>
--------------------------
$ git branch

<span class="c1"># 输出</span>
* dev       <span class="c1"># 这时 HEAD 已经被切换至 dev 分支</span>
  master
</code></pre></td></tr></table>
</div>
</div><h3 id="merge将-dev-的修改推送到-master">(merge）将 dev 的修改推送到 master</h3>
<p>们 <code>dev</code> 中的修改推送到 <code>master</code> 中，首先要切换到 <code>master</code>, 再将 <code>dev</code> 推送过来.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ git checkout master   <span class="c1"># 切换至 master 才能把其他分支合并过来</span>

$ git merge dev         <span class="c1"># 将 dev merge 到 master 中</span>
$ git log --oneline --graph

<span class="c1"># 输出</span>
* f9584f8 change <span class="m">3</span> in dev
* 47f167e back to change <span class="m">1</span> and add comment <span class="k">for</span> 1.py
* 904e1ba change <span class="m">2</span>
* c6762a1 change <span class="m">1</span>
* 13be9a7 create 1.py
</code></pre></td></tr></table>
</div>
</div><p>要注意的是, 如果直接 <code>git merge dev</code>, git 会采用默认的 <code>Fast forward</code> 格式进行 <code>merge</code>, 这样 <code>merge</code> 的这次操作不会有 <code>commit</code> 信息. <code>log</code> 中也不会有分支的图案. 我们可以采取 <code>--no-ff</code> 这种方式保留 <code>merge</code> 的 <code>commit</code> 信息.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ git merge --no-ff -m <span class="s2">&#34;keep merge info&#34;</span> dev         <span class="c1"># 保留 merge 信息</span>
$ git log --oneline --graph

<span class="c1"># 输出</span>
*   c60668f keep merge info
<span class="p">|</span><span class="se">\ </span> 
<span class="p">|</span> * f9584f8 change <span class="m">3</span> in dev         <span class="c1"># 这里就能看出, 我们建立过一个分支</span>
<span class="p">|</span>/  
* 47f167e back to change <span class="m">1</span> and add comment <span class="k">for</span> 1.py
* 904e1ba change <span class="m">2</span>
* c6762a1 change <span class="m">1</span>
* 13be9a7 create 1.py
</code></pre></td></tr></table>
</div>
</div><h3 id="commit解决冲突">(commit）解决冲突</h3>
<p>如果对于同一个文件，master和dev进行了不同的修改，也就是说在 <code>master</code> 和 <code>dev</code> 上的版本是不同的，此时<code>merge</code> 就会有冲突，提示为</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">Auto-merging 1.py CONFLICT <span class="o">(</span>content<span class="o">)</span>: Merge conflict in 1.py Automatic merge failed<span class="p">;</span> fix conflicts and <span class="k">then</span> commit the result.
</code></pre></td></tr></table>
</div>
</div><p>此时分支其实已经合并了，但是存在冲突的文件会被git自动进行标注，以方便我们解决冲突，打开1.py可以看到</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nv">a</span> <span class="o">=</span> <span class="m">1</span>
<span class="c1"># I went back to change 1</span>
<span class="o">&lt;&lt;&lt;&lt;&lt;&lt;</span>&lt; HEAD
<span class="c1"># edited in master</span>
<span class="o">=======</span>
<span class="c1"># edited in dev</span>
&gt;&gt;&gt;&gt;&gt;&gt;&gt; dev
</code></pre></td></tr></table>
</div>
</div><p>我们只需要手动处理被标记出来的冲突行即可，可以这么进行理解，对于该冲突文件，git进行标记，产生了一个不同于master和dev的第三个版本的文件，此时我们需要手动将该文件编辑为合适的正确的第三版本文件，并记得解决完冲突后进行commit，将其确定为主分支的唯一版本。
然后再 <code>commit</code> 现在的文件, 冲突就解决啦.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ git commit -am <span class="s2">&#34;solve conflict&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>再来看看 <code>master</code> 的 <code>log</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ git log --oneline --graph

<span class="c1"># 输出</span>
*   <span class="m">7810065</span> solve conflict
<span class="p">|</span><span class="se">\ </span> 
<span class="p">|</span> * f7d2e3a change <span class="m">3</span> in dev
* <span class="p">|</span> 3d7796e change <span class="m">4</span> in master
<span class="p">|</span>/  
* 47f167e back to change <span class="m">1</span> and add comment <span class="k">for</span> 1.py
* 904e1ba change <span class="m">2</span>
* c6762a1 change <span class="m">1</span>
* 13be9a7 create 1.py
</code></pre></td></tr></table>
</div>
</div><p>可以看到，第一次merge时，并没有产生版本号，也就是出现冲突后产生了一个“待解决”过渡版本，随后我们解决完冲突后进行commit才可以产生正确的唯一分支。</p>
<h3 id="rebase变基">(rebase）变基</h3>
<p>同样是合并， <code>rebase</code> 的做法和 <code>merge</code> 不一样.</p>
<p>假设共享的 branch 是 <code>branch B</code>, 而我在 <code>branch A</code> 上工作, 有一天我发现<code>branch B</code>已经有一些小更新, 我也想试试我的程序和这些小更新兼不兼容, 但我并不想直接合并我的未完成版本到 <code>branch A</code>上, 这时就可以用 <code>rebase</code> 来补充我的分支<code>branch B</code>的内容. 补充完以后, 和后面那张图的 <code>merge</code> 不同, 我还是继续在 <code>C3</code> 上工作, 不过此时的 <code>C3</code> 的本质却不一样了, 因为吸收了那些小更新. 所以我们用 <code>C3'</code> 来代替.</p>
<p><figure><a class="lightgallery" href="/posts/git/Pasted%20image%2020210901175904.png" title="/posts/git/Pasted%20image%2020210901175904.png" data-thumbnail="/posts/git/Pasted%20image%2020210901175904.png" data-sub-html="<h2>原分支</h2>">
        
    </a><figcaption class="image-caption">原分支</figcaption>
    </figure></p>
<p><figure><a class="lightgallery" href="/posts/git/Pasted%20image%2020210901175908.png" title="/posts/git/Pasted%20image%2020210901175908.png" data-thumbnail="/posts/git/Pasted%20image%2020210901175908.png" data-sub-html="<h2>将C3变为变基状态</h2>">
        
    </a><figcaption class="image-caption">将C3变为变基状态</figcaption>
    </figure></p>
<p><figure><a class="lightgallery" href="/posts/git/Pasted%20image%2020210901175912.png" title="/posts/git/Pasted%20image%2020210901175912.png" data-thumbnail="/posts/git/Pasted%20image%2020210901175912.png" data-sub-html="<h2>将C3的基变为C4</h2>">
        
    </a><figcaption class="image-caption">将C3的基变为C4</figcaption>
    </figure></p>
<p><figure><a class="lightgallery" href="/posts/git/Pasted%20image%2020210901175916.png" title="/posts/git/Pasted%20image%2020210901175916.png" data-thumbnail="/posts/git/Pasted%20image%2020210901175916.png" data-sub-html="<h2>以C4为新的基，原分支A上的修改被合并</h2>">
        
    </a><figcaption class="image-caption">以C4为新的基，原分支A上的修改被合并</figcaption>
    </figure></p>
<p>可以看出 <code>rebase</code> 改变了 <code>C3</code> 的属性, <code>C3</code> 已经不是从 <code>C1</code> 衍生而来的了. 这一点和 <code>merge</code> 不一样. <code>merge</code> 在合并的时候创建了一个新的 <code>C5</code> <code>commit</code>. 这一点不同, 使得在共享分支中使用 <code>rebase</code> 变得危险. 如果是共享分支的历史被改写. 别人之前共享内容的 <code>commit</code> 就被你的 <code>rebase</code> 修改掉了.</p>
<p><figure><a class="lightgallery" href="/posts/git/Pasted%20image%2020210901175926.png" title="/posts/git/Pasted%20image%2020210901175926.png" data-thumbnail="/posts/git/Pasted%20image%2020210901175926.png" data-sub-html="<h2>改写历史</h2>">
        
    </a><figcaption class="image-caption">改写历史</figcaption>
    </figure></p>
<p>此外，需要注意的是， <strong>!!! 只能在你自己的分支中使用 rebase, 和别人共享的部分是不能用的 !!!</strong></p>
<p>初始的版本库还是和上回一样, 在 <code>master</code> 和 <code>dev</code> 分支中都有自己的独立修改.</p>
<p>在 <code>master</code>创建一个文件后，产生分支，在 <code>master</code>中继续创建第二个文件，然后在dev分支中分两次在文件一中进行修改。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># 这是 master 的 log</span>
* bf75fad <span class="o">(</span>HEAD -&gt; master<span class="o">)</span> create <span class="m">2</span>  
* f1e708f create <span class="m">1</span>
-----------------------------
<span class="c1"># 这是 dev 的 log</span>
* 103ebbd <span class="o">(</span>HEAD -&gt; dev<span class="o">)</span> add <span class="m">2</span> in dev  
* 7de4a5b add <span class="m">1</span> in dev  
* f1e708f create <span class="m">1</span>
</code></pre></td></tr></table>
</div>
</div><p>当我们想要用 rebase 合并 master 到 dev的时候:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ git branch

<span class="c1"># 输出</span>
 *dev
  master
-------------------------
$ git rebase master 

<span class="c1"># 输出</span>
First, rewinding head to replay your work on top of it...
Applying: change <span class="m">3</span> in dev
Using index info to reconstruct a base tree...
M   1.py
Falling back to patching base and 3-way merge...
Auto-merging 1.py
CONFLICT <span class="o">(</span>content<span class="o">)</span>: Merge conflict in 1.py
error: Failed to merge in the changes.
Patch failed at <span class="m">0001</span> change <span class="m">3</span> in dev
The copy of the patch that failed is found in: .git/rebase-apply/patch

When you have resolved this problem, run <span class="s2">&#34;git rebase --continue&#34;</span>.
If you prefer to skip this patch, run <span class="s2">&#34;git rebase --skip&#34;</span> instead.
To check out the original branch and stop rebasing, run <span class="s2">&#34;git rebase --abort&#34;</span>.
</code></pre></td></tr></table>
</div>
</div><p>git 发现的我们的 1.py 在 master 和 dev 上的版本是不同的, 所以提示 merge 有冲突. 具体的冲突, git 已经帮我们标记出来, 我们打开 1.py 就能看到:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nv">a</span> <span class="o">=</span> <span class="m">1</span>
<span class="c1"># I went back to change 1</span>
<span class="o">&lt;&lt;&lt;&lt;&lt;&lt;</span>&lt; f7d2e3a047be4624e83c1265a0946e2e8790f79c
<span class="c1"># edited in dev</span>
<span class="o">=======</span>
<span class="c1"># edited in master</span>
&gt;&gt;&gt;&gt;&gt;&gt;&gt; change <span class="m">4</span> in master
</code></pre></td></tr></table>
</div>
</div><p>这时 HEAD 并没有指向 master 或者 dev, 而是停在了 rebase 模式上:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ git branch
* <span class="o">(</span>no branch, rebasing master<span class="o">)</span> <span class="c1"># HEAD 在这</span>
  dev
  master
</code></pre></td></tr></table>
</div>
</div><p>所以我们打开 1.py, 手动合并一下两者的不同.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">a = 1
# I went back to change 1
​
# edited in master and dev
</code></pre></td></tr></table>
</div>
</div><p>然后执行 git add 和 git rebase &ndash;continue 就完成了 rebase 的操作了.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ git add 1.py
$ git rebase --continue
</code></pre></td></tr></table>
</div>
</div><p>此时来看看dev的log</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">* 7f28382 <span class="o">(</span>HEAD -&gt; dev<span class="o">)</span> add <span class="m">2</span> in dev  
* 7f26325 add <span class="m">1</span> in dev  <span class="c1"># 基于现在最新的bf75fad进行修改</span>
* bf75fad <span class="o">(</span>master<span class="o">)</span> create <span class="m">2</span>  
* f1e708f create <span class="m">1</span>
</code></pre></td></tr></table>
</div>
</div><p>!! 注意 !! 这个例子也说明了使用 rebase 要万分小心, 千万不要在共享的 branch 中 rebase, 不然就像上面那样, 现在 dev 的历史已经被 rebase 改变了. dev 当中别人提交的 change 就被你无情地修改掉了, 所以千万不要在共享分支中使用 rebase.但你可以选择在rebase后merge到master中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ git checkout master
切换到分支 <span class="s1">&#39;master&#39;</span>
$ git merge dev
更新 bf75fad..7f28382  
Fast-forward  
1.py <span class="p">|</span> <span class="m">3</span> +++  
<span class="m">1</span> file changed, <span class="m">3</span> insertions<span class="o">(</span>+<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><p>再来看看 master 的 log:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ git log --oneline --graph

<span class="c1"># 输出</span>
7f28382 <span class="o">(</span>HEAD -&gt; master, dev<span class="o">)</span> add <span class="m">2</span> in dev <span class="c1"># dev中的修改被合并到master中，且没有产生分支</span>
7f26325 add <span class="m">1</span> in dev  
bf75fad create <span class="m">2</span>  
f1e708f create <span class="m">1</span>

</code></pre></td></tr></table>
</div>
</div><h3 id="stash临时修改">(stash）临时修改</h3>
<p>假如我们正在进行任务A，但是突然有一个紧急bug修改任务B，但是我并不想把我现在的未完成任务A一起提交或者丢弃，此时我们就可以使用<code>stash</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ git status -s
<span class="c1"># 输出</span>
 M 1.py
------------------ 
$ git stash
<span class="c1"># 输出</span>
Saved working directory and index state WIP on dev: f7d2e3a change <span class="m">3</span> in dev
HEAD is now at f7d2e3a change <span class="m">3</span> in dev
-------------------
$ git status
<span class="c1"># 输出</span>
On branch dev
nothing to commit, working directory clean  <span class="c1"># 干净得很</span>
</code></pre></td></tr></table>
</div>
</div><p>随后我们完成任务B
完成了, 现在可以继续开心的在 <code>dev</code> 上刷代码了.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ git checkout dev
$ git stash list    <span class="c1"># 查看在 stash 中的缓存</span>

<span class="c1"># 输出</span>
stash@<span class="o">{</span>0<span class="o">}</span>: WIP on dev: f7d2e3a change <span class="m">3</span> in dev
</code></pre></td></tr></table>
</div>
</div><p>上面说明在 <code>dev</code> 中, 我们的确有 <code>stash</code> 的工作. 现在可以通过 <code>pop</code> 来提取这个并继续工作了.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ git stash pop

<span class="c1"># 输出</span>
On branch dev
Changes not staged <span class="k">for</span> commit:
  <span class="o">(</span>use <span class="s2">&#34;git add &lt;file&gt;...&#34;</span> to update what will be committed<span class="o">)</span>
  <span class="o">(</span>use <span class="s2">&#34;git checkout -- &lt;file&gt;...&#34;</span> to discard changes in working directory<span class="o">)</span>

    modified:   1.py

no changes added to commit <span class="o">(</span>use <span class="s2">&#34;git add&#34;</span> and/or <span class="s2">&#34;git commit -a&#34;</span><span class="o">)</span>
Dropped refs/stash@<span class="o">{</span>0<span class="o">}</span> <span class="o">(</span>23332b7edc105a579b09b127336240a45756a91c<span class="o">)</span>
----------------------
$ git status -s
<span class="c1"># 输出</span>
 M 1.py     <span class="c1"># 和最开始一样了</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="merge和rebase的区别">merge和rebase的区别</h2>
<p>参考<a href="https://www.jianshu.com/p/39c45f990c99" target="_blank" rel="noopener noreffer">git rebase的一点理解</a></p>
<h3 id="merge">merge</h3>
<p>merge是我们常用的合并分支的命令：
假如开发中：分叉到两个不同的分支，右各自有新的提交：</p>
<p><figure><a class="lightgallery" href="/posts/git/Pasted%20image%2020210901183914.png" title="image" data-thumbnail="/posts/git/Pasted%20image%2020210901183914.png" data-sub-html="<h2>原分支</h2><p>image</p>">
        
    </a><figcaption class="image-caption">原分支</figcaption>
    </figure></p>
<p>当我们使用merge命令合并时，它会把两个分支的最新提交历史（<code>C3</code> 和 <code>C4</code>）和这个两个分支的最近的祖先（<code>C2</code>）进行三方合并，合并的结果就是生成一个新的提交历史。
举例子来说
假如C2共ABC三个文件
甲在master的基础上修改bug，在A中删除了代码，在C中修改了代码
乙创建新分支来增加功能，在B中新增了代码，在C中修改了代码
而后进行merge，基于C2来进行三方合并，于是在A中删除部分代码，在B中新增代码，然后讨论解决一下C中的冲突，创建了C5版本，完成合并</p>
<p><figure><a class="lightgallery" href="/posts/git/Pasted%20image%2020210901183921.png" title="image" data-thumbnail="/posts/git/Pasted%20image%2020210901183921.png" data-sub-html="<h2>基于共同历史C2，进行三方合并</h2><p>image</p>">
        
    </a><figcaption class="image-caption">基于共同历史C2，进行三方合并</figcaption>
    </figure></p>
<p>通过合并操作来整合分叉了的历史。</p>
<p>在将三方合并的时候，总是需要以一个提交历史作为依据的，在这个提交历史的基础上增加其他两个的修改，merge上使用的就是这个两个分支的最近的祖先（<code>C2</code>）作为依据。</p>
<h3 id="rebase">rebase</h3>
<p>首先我们要理解git的版本管理方式，基于上一个历史版本，存储现在的更改，而后现在的版本又作为下一个版本的历史版本。所以，回溯版本相当于把每一个历史版本的更改依次进行还原，跳转之后的版本相当于把每一次更改再重新做一遍。</p>
<p>rebase这个命令在官方的翻译中意思是：变基。</p>
<p>额，怎么说都有点怪是不是，最后查了几个词典，我觉得把rebase翻译为：重定基底</p>
<p>重定基底有两词语组成：</p>
<ul>
<li>重定：动词，重新确定的意思</li>
<li>基底：名词，就是依据，把某种事物作为依托或根据，在git中，这个依据的事物就是<strong>提交历史</strong></li>
</ul>
<p>合起来就是：重新确定所依据的提交历史。</p>
<p>rebase同样是通过合并来整合分叉的历史，唯一的不同就是，<strong>合并时所依据的提交历史不同</strong>（基），它是直接拿两个分支的最新提交历史（<code>C3</code> 和 <code>C4</code>）中的一个作为依据（即基），比如以<code>C3</code>为基础，提取在 <code>C4</code> 中引入的补丁和修改，然后在 <code>C3</code> 的基础上应用一次。</p>
<p>这个过程就相当于改变<code>C4</code>的基底为<code>C3</code>，并将<code>C4</code>上的修改依序应用于<code>C3</code> 上，生成新的<code>C4'</code>, 这个过程就改变了<code>C4</code>的基底，也就是所谓的<strong>变基</strong>。</p>
<p><figure><a class="lightgallery" href="/posts/git/Pasted%20image%2020210901184802.png" title="image" data-thumbnail="/posts/git/Pasted%20image%2020210901184802.png" data-sub-html="<h2>改变C4的基底为C3，并将C4上的修改依序应用于C3 上，生成新的C4&#39;</h2><p>image</p>">
        
    </a><figcaption class="image-caption">改变C4的基底为C3，并将C4上的修改依序应用于C3 上，生成新的C4'</figcaption>
    </figure></p>
<p>将 <code>C4</code> 中的修改变基到 <code>C3</code> 上。</p>
<p><code>git rebase [basebranch][topicbranch]</code> ， 以basebranch为基，将topicbranch的修改应用于basebranch上。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ git checkout experiment
$ git rebase master
First, rewinding head to replay your work on top of it...
Applying: added staged <span class="nb">command</span>
</code></pre></td></tr></table>
</div>
</div><p>这时experiment分支的提交历史就已经改变了，master分支在experiment分支之后。</p>
<p>现在回到 <code>master</code> 分支，进行一次快进合并。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">$ git checkout master
$ git merge experiment
</code></pre></td></tr></table>
</div>
</div><p><figure><a class="lightgallery" href="/posts/git/Pasted%20image%2020210901184906.png" title="image" data-thumbnail="/posts/git/Pasted%20image%2020210901184906.png" data-sub-html="<h2>变基合并可以让最后只剩下一条主线分支</h2><p>image</p>">
        
    </a><figcaption class="image-caption">变基合并可以让最后只剩下一条主线分支</figcaption>
    </figure></p>
<p>此时，C4' 指向的快照就和上面使用 merge 命令的例子中 C5 指向的快照一模一样了。</p>
<p>这两种整合方法的最终结果没有任何区别，但是变基使得提交历史更加整洁。如果开发中使用rebase，可以使得最终的开发版本历史只有一条清晰的主分支，在分支上进行的修改也呈现线性记录。</p>
<h3 id="区别">区别</h3>
<p>无论是通过变基，还是通过三方合并，最后所生成的结果是一样的，只是他们所生成体提交历史不同。</p>
<p>变基：将一个分支的一系列的提交按顺序应用到另一分支上，前者的所有历史更改被合并为一个大的历史更改保存在历史中。</p>
<p>三方合并：把两方的最后提交合并在一起，因为他们分别的最后提交的版本是基于他们的共同祖先依次迭代更改生成的，所以合并后，每一个分支的所有历史都会被保留。</p>
<p>变基操作的实际是：丢弃一个分支上现有的提交，在另一个分支上新建这些内容但实际上不同的提交。</p>
<h2 id="补充">补充</h2>
<p>当你进行了修改，但是没有add和commit时，此时切换到其他分支，如果当前的修改会被覆盖，git会进行警告。</p>
]]></description>
</item><item>
    <title>RNA-seq基础-1-环境配置</title>
    <link>http://imzifeng.cn/posts/rnaseq-1/</link>
    <pubDate>Fri, 13 Aug 2021 16:36:49 &#43;0800</pubDate><author>
        <name>zifeng</name>
    </author><guid>http://imzifeng.cn/posts/rnaseq-1/</guid>
    <description><![CDATA[<p>Miniconda是Anaconda的基础版，提供环境管理</p>
<h3 id="下载">下载</h3>
<p><a href="https://docs.conda.io/en/latest/miniconda.html" target="_blank" rel="noopener noreffer">Miniconda官网</a>
使用最新包的地址下载</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
</code></pre></td></tr></table>
</div>
</div><p>下载完成：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ ls
Miniconda3-latest-Linux-x86_64.sh
</code></pre></td></tr></table>
</div>
</div><h3 id="安装">安装</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sh Miniconda3-latest-Linux-x86_64.sh
  
Welcome to Miniconda3 py39_4.10.3  
  
In order to <span class="k">continue</span> the installation process, please review the license  
agreement.  
Please, press ENTER to <span class="k">continue</span>  
&gt;&gt;&gt;
</code></pre></td></tr></table>
</div>
</div><p>回车继续，然后按空格直接跳到文档底部，输入yes并回车</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">Do you accept the license terms? <span class="o">[</span>yes<span class="p">|</span>no<span class="o">]</span>  
<span class="o">[</span>no<span class="o">]</span> &gt;&gt;&gt;yes
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">Miniconda3 will now be installed into this location:  
/home/xxx/miniconda3  
  
- Press ENTER to confirm the location  
- Press CTRL-C to abort the installation  
- Or specify a different location below  
  
<span class="o">[</span>/home/xxx/miniconda3<span class="o">]</span> &gt;&gt;&gt;
</code></pre></td></tr></table>
</div>
</div><p>之后一路yes回车即可</p>
<h3 id="添加国内源">添加国内源</h3>
<p>conda默认从国外服务器上下载包，速度较慢，可换为国内源
<a href="https://mirror.tuna.tsinghua.edu.cn/help/anaconda/" target="_blank" rel="noopener noreffer">清华源</a></p>
<h3 id="创建新环境">创建新环境</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">conda create -n rnaseq <span class="nv">python</span><span class="o">==</span>3.7 -y
</code></pre></td></tr></table>
</div>
</div><p>测试python3.7对各种包的支持较好
完成后，进入该环境</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ conda activate rnaseq
<span class="o">(</span>rnaseq<span class="o">)</span> xxx@luo-lab-tower:~$
</code></pre></td></tr></table>
</div>
</div><p>命令提示符前的括号表示当前的环境，只有进入到该环境中才可以使用该环境中的包，可以创建多个环境，多个环境之间互不影响。</p>
<h3 id="安装hisat2-stringtie分析流程所需的软件包">安装hisat2-stringtie分析流程所需的软件包</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="o">(</span>rnaseq<span class="o">)</span> xxx@luo-lab-tower:~$ conda install fastqc -y
</code></pre></td></tr></table>
</div>
</div><p>fastqc 用于检验reads读数质量
用相同办法继续安装：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">hisat2
samtools
stringtie
htseq-count
tqdm
</code></pre></td></tr></table>
</div>
</div><p>参照该博文<a href="https://blog.csdn.net/guguaihezi/article/details/81240916" target="_blank" rel="noopener noreffer">安装sratoolkit最新版</a>
官方安装包地址：https://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/
最新的应该是2.11.0</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>技巧<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">完成以上后，自行google了解这些包的主要用途和基本使用方法。</div>
        </div>
    </div>]]></description>
</item><item>
    <title>Electron Python</title>
    <link>http://imzifeng.cn/posts/electron-python/</link>
    <pubDate>Tue, 13 Jul 2021 21:55:18 &#43;0800</pubDate><author>
        <name>zifeng</name>
    </author><guid>http://imzifeng.cn/posts/electron-python/</guid>
    <description><![CDATA[<h2 id="项目最终效果展示">项目最终效果展示</h2>
<p></p>
<h2 id="概览">概览</h2>
<p>为方便使用开源项目<a href="https://github.com/bytedance/piano_transcription" target="_blank" rel="noopener noreffer">piano_transcription</a>而创建，原项目可将钢琴音频通过机器学习模型转化为MIDI文件乐谱(.mid)，原项目每次操作均需要通过命令行输入欲转换的音频文件地址，该GUI可将所有操作为简单的chlick&amp;drag。</p>
<h2 id="结构">结构</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">start
 |
 V
+--------------------+
|                    | start
|  electron          +-------------&gt; +------------------+
|                    | sub process   |                  |
| (browser or)       |               | python server    |
|  desktop app       |               |                  |
| (all html/css/js)  |               | (business logic) |
|                    |    thrift     |                  |
| (node.js runtime,  | &lt;-----------&gt; | (thrift server)  |
|  thrift client)    | communication |                  |
|                    |               |                  |
+--------------------+               +------------------+
</code></pre></td></tr></table>
</div>
</div><p>electron负责前台，不含任何业务逻辑，在main.js中创建python子线程，python子线程被创建后作为一个client监听转换任务，并调用相关的转换业务，二者通过<a href="https://github.com/apache/thrift" target="_blank" rel="noopener noreffer">Apache Thrift</a>进行通信。</p>
<h2 id="运行效果">运行效果</h2>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<h2 id="mainjs">main.js</h2>
<p>main.js为程序入口和主线程，负责建立窗口和处理来自渲染线程的窗口操作消息，两个线程通过ipc进行通信。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="p">{</span><span class="nx">app</span><span class="p">,</span> <span class="nx">BrowserWindow</span><span class="p">,</span> <span class="nx">Notification</span><span class="p">,</span> <span class="nx">dialog</span><span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;electron&#39;</span><span class="p">)</span>

  <span class="c1">// Keep a global reference of the window object, if you don&#39;t, the window will
</span><span class="c1"></span>  <span class="c1">// be closed automatically when the JavaScript object is garbage collected.
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">win</span>

  <span class="kd">function</span> <span class="nx">createWindow</span> <span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 创建浏览器窗口。
</span><span class="c1"></span>    <span class="nx">win</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BrowserWindow</span><span class="p">({</span>
      <span class="nx">width</span><span class="o">:</span> <span class="mi">1000</span><span class="p">,</span> 
      <span class="nx">height</span><span class="o">:</span> <span class="mi">800</span><span class="p">,</span> 
      <span class="nx">webPreferences</span><span class="o">:</span><span class="p">{</span><span class="nx">nodeIntegration</span><span class="o">:</span><span class="kc">true</span><span class="p">},</span>
      <span class="nx">transparent</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="nx">frame</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
      <span class="nx">resizable</span><span class="o">:</span><span class="kc">false</span><span class="p">,</span>
      <span class="c1">// backgroundColor: &#39;#00000000&#39;,
</span><span class="c1"></span>    <span class="p">})</span>

    <span class="c1">// 然后加载应用的 index.html。
</span><span class="c1"></span>    <span class="nx">win</span><span class="p">.</span><span class="nx">loadFile</span><span class="p">(</span><span class="s1">&#39;new_index.html&#39;</span><span class="p">)</span>

    <span class="c1">// 打开开发者工具
</span><span class="c1"></span>    <span class="c1">// win.webContents.openDevTools()
</span><span class="c1"></span>
    <span class="c1">// 当 window 被关闭，这个事件会被触发。
</span><span class="c1"></span>    <span class="nx">win</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;closed&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
      <span class="c1">// 取消引用 window 对象，如果你的应用支持多窗口的话，
</span><span class="c1"></span>      <span class="c1">// 通常会把多个 window 对象存放在一个数组里面，
</span><span class="c1"></span>      <span class="c1">// 与此同时，你应该删除相应的元素。
</span><span class="c1"></span>      <span class="nx">win</span> <span class="o">=</span> <span class="kc">null</span>
    <span class="p">})</span>
  <span class="p">}</span>

  <span class="c1">// Electron 会在初始化后并准备
</span><span class="c1"></span>  <span class="c1">// 创建浏览器窗口时，调用这个函数。
</span><span class="c1"></span>  <span class="c1">// 部分 API 在 ready 事件触发后才能使用。
</span><span class="c1"></span>  <span class="nx">app</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;ready&#39;</span><span class="p">,</span> <span class="nx">createWindow</span><span class="p">)</span>

  <span class="c1">// 当全部窗口关闭时退出。
</span><span class="c1"></span>  <span class="nx">app</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;window-all-closed&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="c1">// 在 macOS 上，除非用户用 Cmd + Q 确定地退出，
</span><span class="c1"></span>    <span class="c1">// 否则绝大部分应用及其菜单栏会保持激活。
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">platform</span> <span class="o">!==</span> <span class="s1">&#39;darwin&#39;</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">app</span><span class="p">.</span><span class="nx">quit</span><span class="p">()</span>
    <span class="p">}</span>
  <span class="p">})</span>

  <span class="nx">app</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;activate&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="c1">// 在macOS上，当单击dock图标并且没有其他窗口打开时，
</span><span class="c1"></span>    <span class="c1">// 通常在应用程序中重新创建一个窗口。
</span><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="nx">win</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">createWindow</span><span class="p">()</span>
    <span class="p">}</span>
  <span class="p">})</span>

  <span class="c1">// 在这个文件中，可以续写应用剩下主进程代码。
</span><span class="c1"></span>  <span class="c1">// 也可以拆分成几个文件，然后用 require 导入。
</span><span class="c1"></span>
<span class="kr">const</span> <span class="nx">path</span><span class="o">=</span><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">)</span>
<span class="kd">let</span> <span class="nx">pyProc</span> <span class="o">=</span> <span class="kc">null</span>
<span class="kd">let</span> <span class="nx">pyPort</span> <span class="o">=</span> <span class="kc">null</span>


<span class="kr">const</span> <span class="nx">createPyProc</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="c1">// let port = &#39;4242&#39;
</span><span class="c1"></span>  <span class="kd">let</span> <span class="nx">script</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="mi">__</span><span class="nx">dirname</span><span class="p">,</span> <span class="s1">&#39;py&#39;</span><span class="p">,</span> <span class="s1">&#39;thrift_server.py&#39;</span><span class="p">)</span>
  <span class="nx">pyProc</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;child_process&#39;</span><span class="p">).</span><span class="nx">spawn</span><span class="p">(</span><span class="s1">&#39;python&#39;</span><span class="p">,</span> <span class="p">[</span><span class="nx">script</span><span class="p">])</span>
  <span class="c1">// let script = path.join(__dirname, &#39;py&#39;, &#39;dist&#39;,&#39;thrift_server&#39;, &#39;thrift_server.exe&#39;)
</span><span class="c1"></span>  <span class="c1">// pyProc = require(&#39;child_process&#39;).execFile(script)
</span><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="nx">pyProc</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;child process success&#39;</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>


<span class="kr">const</span> <span class="nx">exitPyProc</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="nx">pyProc</span><span class="p">.</span><span class="nx">kill</span><span class="p">()</span>
  <span class="nx">pyProc</span> <span class="o">=</span> <span class="kc">null</span>
  <span class="nx">pyPort</span> <span class="o">=</span> <span class="kc">null</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">ipcMain</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;electron&#39;</span><span class="p">).</span><span class="nx">ipcMain</span><span class="p">;</span>
<span class="c1">//接收最小化命令
</span><span class="c1"></span><span class="nx">ipcMain</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;window-min&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">win</span><span class="p">.</span><span class="nx">minimize</span><span class="p">();</span>
<span class="p">})</span>
<span class="c1">//接收最大化命令
</span><span class="c1"></span><span class="nx">ipcMain</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;window-max&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">win</span><span class="p">.</span><span class="nx">isMaximized</span><span class="p">())</span> <span class="p">{</span>
        <span class="nx">win</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">win</span><span class="p">.</span><span class="nx">maximize</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">})</span>
<span class="c1">//接收关闭命令
</span><span class="c1"></span><span class="nx">ipcMain</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;window-close&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">win</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
<span class="p">})</span>

<span class="c1">//拖动保存文件
</span><span class="c1"></span><span class="nx">ipcMain</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;ondragstart&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">filePath</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="nx">event</span><span class="p">.</span><span class="nx">sender</span><span class="p">.</span><span class="nx">startDrag</span><span class="p">({</span>
    <span class="nx">file</span><span class="o">:</span> <span class="nx">filePath</span><span class="p">,</span>
    <span class="nx">icon</span><span class="o">:</span> <span class="s1">&#39;./icon.png&#39;</span>
  <span class="p">})</span>
<span class="p">})</span>

<span class="c1">//显示通知
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">showNotification</span> <span class="p">(){</span>
  <span class="kr">const</span> <span class="nx">notification</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;Piano transcription E&#39;</span><span class="p">,</span>
    <span class="nx">body</span><span class="o">:</span> <span class="s1">&#39;转换任务已完成&#39;</span>
  <span class="p">}</span>
  <span class="k">new</span> <span class="nx">Notification</span><span class="p">(</span><span class="nx">notification</span><span class="p">).</span><span class="nx">show</span><span class="p">()</span>
<span class="p">}</span>
<span class="nx">ipcMain</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;showNotification&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">showNotification</span><span class="p">();</span>
<span class="p">})</span>

<span class="c1">//接收打开对话框事件，完成后，回传获取到的文件路径到渲染线程
</span><span class="c1"></span><span class="nx">ipcMain</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;openDialog&#39;</span><span class="p">,(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">arg</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="nx">dialog</span><span class="p">.</span><span class="nx">showOpenDialog</span><span class="p">({</span> <span class="nx">properties</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;openFile&#39;</span><span class="p">,</span> <span class="s1">&#39;multiSelections&#39;</span><span class="p">]</span> <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="nx">result</span><span class="p">=&gt;{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">filePaths</span><span class="p">);</span>        <span class="c1">//输出结果
</span><span class="c1"></span>      <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">filePaths</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">event</span><span class="p">.</span><span class="nx">reply</span><span class="p">(</span><span class="s1">&#39;selectedItem&#39;</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nx">filePaths</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">})</span>
  <span class="p">})</span>

<span class="c1">//设置应用启动关闭时联动python子线程
</span><span class="c1"></span><span class="nx">app</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;ready&#39;</span><span class="p">,</span> <span class="nx">createPyProc</span><span class="p">)</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;will-quit&#39;</span><span class="p">,</span> <span class="nx">exitPyProc</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="renderjs">render.js</h2>
<p>render线程作为页面逻辑元素被加载，负责建立thrift子线程，与子线程通信，并相应鼠标点击事件转换为事件信息传入主线程以控制桌面应用下的窗口。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="c1">// renderer.js
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">thrift</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;thrift&#39;</span><span class="p">);</span>
<span class="c1">// 调用win10下thrift命令自动生成的依赖包
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">TranscriptionService</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./gen-nodejs/TranscriptionService.js&#39;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">ttypes</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./gen-nodejs/trans_types.js&#39;</span><span class="p">);</span>
<span class="c1">// thrift 通信会占用一个本地端口
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">thriftConnection</span> <span class="o">=</span> <span class="nx">thrift</span><span class="p">.</span><span class="nx">createConnection</span><span class="p">(</span><span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="mi">8000</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">thriftClient</span> <span class="o">=</span> <span class="nx">thrift</span><span class="p">.</span><span class="nx">createClient</span><span class="p">(</span><span class="nx">TranscriptionService</span><span class="p">,</span><span class="nx">thriftConnection</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">);</span>

<span class="c1">//建立thrift子线程
</span><span class="c1"></span><span class="nx">thriftConnection</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&#34;error&#34;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
<span class="p">});</span>

<span class="c1">// let name = document.querySelector(&#39;#name&#39;)
</span><span class="c1">// let result = document.querySelector(&#39;#result&#39;)
</span><span class="c1"></span>
<span class="kd">let</span> <span class="nx">ipcRenderer</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;electron&#39;</span><span class="p">).</span><span class="nx">ipcRenderer</span><span class="p">;</span>

<span class="c1">//响应点击最大化按钮
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">max</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;max&#39;</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">max</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">max</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="c1">//发送最大化命令
</span><span class="c1"></span>        <span class="nx">ipcRenderer</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;window-max&#39;</span><span class="p">);</span>
        <span class="c1">//最大化图形切换
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="nx">max</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;src&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;images/max.png&#39;</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">max</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;src&#39;</span><span class="p">,</span> <span class="s1">&#39;images/maxed.png&#39;</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">max</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;src&#39;</span><span class="p">,</span> <span class="s1">&#39;images/max.png&#39;</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">})</span>
<span class="p">}</span>

<span class="c1">//响应点击最小化按钮
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">min</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;min&#39;</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">min</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">min</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="c1">//发送最小化命令
</span><span class="c1"></span>        <span class="nx">ipcRenderer</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;window-min&#39;</span><span class="p">);</span>
    <span class="p">})</span>
<span class="p">}</span>

<span class="c1">//响应点击关闭按钮
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">close</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;close&#39;</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">close</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">close</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="c1">//发送关闭命令
</span><span class="c1"></span>        <span class="nx">ipcRenderer</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;window-close&#39;</span><span class="p">);</span>
    <span class="p">})</span>
<span class="p">}</span>

<span class="c1">//拖动保存文件
</span><span class="c1"></span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;drag_save&#39;</span><span class="p">).</span><span class="nx">ondragstart</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
    <span class="nx">ipcRenderer</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;ondragstart&#39;</span><span class="p">,</span> <span class="nx">dragTosavePath</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">//响应点击开始转换按钮
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">dragTosavePath</span> <span class="o">=</span> <span class="s1">&#39;C:/Development/Projects/piano_transcription/output/test.mid&#39;</span>
<span class="kd">var</span> <span class="nx">transcript</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;transcript&#34;</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">transcript</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">transcript</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
            <span class="c1">// document.getElementById(&#34;progressDiv&#34;).innerHTML=&#39;&lt;div class=&#34;progress-bar progress-bar-striped progress-bar-animated bg-primary&#34; role=&#34;progressbar&#34; style=&#34;width: 100% ;height: 20px;&#34; aria-valuenow=&#34;25&#34; aria-valuemin=&#34;0&#34; aria-valuemax=&#34;100&#34;&gt;&lt;/div&gt;&#39;
</span><span class="c1"></span>            <span class="c1">// document.getElementById(&#34;progressDiv&#34;).setAttribute(&#34;hidden&#34;,true);
</span><span class="c1"></span>            <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;progressDiv&#34;</span><span class="p">).</span><span class="nx">removeAttribute</span><span class="p">(</span><span class="s2">&#34;hidden&#34;</span><span class="p">)</span>
            <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;transcript&#34;</span><span class="p">).</span><span class="nx">classList</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s2">&#34;disabled&#34;</span><span class="p">)</span>
            <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;transcript&#34;</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&#34;processing...&#34;</span>
            <span class="kd">var</span> <span class="nx">dic</span> <span class="o">=</span> <span class="p">{</span><span class="nx">paths</span><span class="o">:</span> <span class="nx">filePaths</span><span class="p">}</span>
            <span class="nx">dic</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">dic</span><span class="p">)</span>
            <span class="nx">thriftClient</span><span class="p">.</span><span class="nx">music2mid</span><span class="p">(</span><span class="nx">dic</span><span class="p">,</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="nx">Swal</span><span class="p">.</span><span class="nx">fire</span><span class="p">(</span><span class="s2">&#34;完成!&#34;</span><span class="p">,</span> <span class="s2">&#34;您的所有转换任务已完成!&#34;</span><span class="p">,</span> <span class="s2">&#34;success&#34;</span><span class="p">);</span>
                    <span class="nx">ipcRenderer</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;showNotification&#39;</span><span class="p">);</span>
                    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;transcript&#34;</span><span class="p">).</span><span class="nx">classList</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="s2">&#34;disabled&#34;</span><span class="p">)</span>
                    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;transcript&#34;</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&#34;start&#34;</span>
                    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;progressDiv&#34;</span><span class="p">).</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&#34;hidden&#34;</span><span class="p">,</span><span class="kc">true</span><span class="p">)</span>
                    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;drag_save&#34;</span><span class="p">).</span><span class="nx">removeAttribute</span><span class="p">(</span><span class="s2">&#34;hidden&#34;</span><span class="p">)</span>
                    <span class="nx">midPaths</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">res</span><span class="p">)[</span><span class="s1">&#39;output_paths&#39;</span><span class="p">]</span>
                    <span class="nx">dragTosavePath</span> <span class="o">=</span> <span class="nx">midPaths</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">dragTosavePath</span><span class="p">)</span>
                <span class="p">}</span>
            <span class="p">})</span>
            
        <span class="p">})</span>
    <span class="p">};</span>

<span class="c1">//响应点击以打开文件
</span><span class="c1"></span><span class="kd">function</span> <span class="nx">openDialog</span><span class="p">(){</span>
    <span class="nx">ipcRenderer</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;openDialog&#39;</span><span class="p">);</span>
<span class="p">};</span>

<span class="nx">ipcRenderer</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;selectedItem&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">paths</span><span class="p">)=&gt;{</span>
    <span class="c1">// console.log(&#39;render:&#39;);
</span><span class="c1"></span>    <span class="c1">// console.log(paths);
</span><span class="c1"></span>    <span class="nx">fileNum</span> <span class="o">+=</span> <span class="nx">paths</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
    <span class="nx">filePaths</span> <span class="o">=</span> <span class="nx">filePaths</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">paths</span><span class="p">)</span>
    <span class="nx">refreshFileNum</span><span class="p">()</span>
<span class="p">});</span>

<span class="kd">var</span> <span class="nx">clickOpen</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;drag_open&#39;</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">clickOpen</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">clickOpen</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="nx">openDialog</span><span class="p">()</span>
    <span class="p">})</span>
<span class="p">};</span>

<span class="c1">//拖拽打开功能
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">dragWrapper</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;drag_open&#34;</span><span class="p">);</span>
<span class="c1">//添加拖拽事件监听器
</span><span class="c1"></span><span class="nx">dragWrapper</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&#34;drop&#34;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="c1">//阻止默认行为
</span><span class="c1"></span>    <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
    <span class="c1">//获取文件列表
</span><span class="c1"></span>    <span class="kr">const</span> <span class="nx">files</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">dataTransfer</span><span class="p">.</span><span class="nx">files</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">paths</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">();</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">file</span> <span class="k">of</span> <span class="nx">files</span><span class="p">){</span>
        <span class="c1">//获取文件路径
</span><span class="c1"></span>        <span class="nx">paths</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">file</span><span class="p">.</span><span class="nx">path</span><span class="p">)</span> 
    <span class="p">}</span>
    <span class="c1">// console.log(paths);
</span><span class="c1"></span>    <span class="nx">fileNum</span> <span class="o">+=</span> <span class="nx">paths</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
    <span class="nx">filePaths</span> <span class="o">=</span> <span class="nx">filePaths</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">paths</span><span class="p">)</span>
    <span class="nx">refreshFileNum</span><span class="p">();</span>
<span class="p">});</span>

<span class="c1">//阻止拖拽结束事件默认行为
</span><span class="c1"></span><span class="nx">dragWrapper</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&#34;dragover&#34;</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
    <span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
<span class="p">});</span>

<span class="kd">var</span> <span class="nx">fileNum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">filePaths</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">();</span>
<span class="kr">const</span> <span class="nx">fileNumLabel</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;fileNumLabel&#34;</span><span class="p">);</span>
<span class="kr">const</span> <span class="nx">fileList</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;fileList&#34;</span><span class="p">);</span>
<span class="kd">function</span> <span class="nx">refreshFileNum</span><span class="p">(){</span>
    <span class="nx">fileNumLabel</span><span class="p">.</span><span class="nx">innerHTML</span><span class="o">=</span><span class="s1">&#39;已选择&#39;</span><span class="o">+</span><span class="nx">fileNum</span><span class="o">+</span><span class="s1">&#39;个文件&#39;</span>
    <span class="nx">fileList</span><span class="p">.</span><span class="nx">innerHTML</span><span class="o">=</span><span class="s1">&#39;&lt;span&gt;支持导入单个或多个音频文件&lt;/span&gt;&#39;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">file</span> <span class="k">of</span> <span class="nx">filePaths</span><span class="p">){</span>
        <span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span>  <span class="nx">file</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&#34;\\&#34;</span><span class="p">)</span>
        <span class="kd">let</span> <span class="nx">fileSpan</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;span&#39;</span><span class="p">)</span>
        <span class="nx">fileSpan</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="nx">fileList</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">fileSpan</span><span class="p">)</span>
    <span class="p">};</span>
    
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">clickOpen</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;check&#39;</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">clickOpen</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">clickOpen</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;transcript&#34;</span><span class="p">).</span><span class="nx">classList</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="s2">&#34;disabled&#34;</span><span class="p">)</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">fileNum</span><span class="p">,</span> <span class="nx">filePaths</span><span class="p">)</span>
    <span class="p">})</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="thriftpy">thrift.py</h2>
<p>thrift.py负责处理业务逻辑部分，并创建thrift服务端，相应转换指令，需要注意的是，前台传入的仅为欲转换音频文件的路径，python完成转换后传回生成的mid文件路径。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">json</span>
<span class="kn">from</span> <span class="nn">thrift.transport</span> <span class="kn">import</span> <span class="n">TSocket</span>
<span class="kn">from</span> <span class="nn">thrift.transport</span> <span class="kn">import</span> <span class="n">TTransport</span>
<span class="kn">from</span> <span class="nn">thrift.protocol</span> <span class="kn">import</span> <span class="n">TBinaryProtocol</span>
<span class="kn">from</span> <span class="nn">thrift.server</span> <span class="kn">import</span> <span class="n">TServer</span>

<span class="kn">from</span> <span class="nn">gen_py.trans</span> <span class="kn">import</span> <span class="n">TranscriptionService</span>

<span class="kn">from</span> <span class="nn">piano_transcription_inference</span> <span class="kn">import</span> <span class="n">PianoTranscription</span><span class="p">,</span> <span class="n">sample_rate</span><span class="p">,</span> <span class="n">load_audio</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="n">checkpoint_path</span> <span class="o">=</span> <span class="s1">&#39;py/piano_transcription_inference_data/note_F1=0.9677_pedal_F1=0.9186.pth&#39;</span>
<span class="k">class</span> <span class="nc">Transcription</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">music2mid</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">dic</span><span class="p">):</span>
        <span class="n">output_files_list</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">dic</span><span class="p">)</span>
        <span class="k">def</span> <span class="nf">mp32mid</span><span class="p">(</span><span class="n">fp</span><span class="p">):</span>
            <span class="c1"># Load audio</span>
            <span class="p">(</span><span class="n">audio</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">load_audio</span><span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">sr</span><span class="o">=</span><span class="n">sample_rate</span><span class="p">,</span> <span class="n">mono</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
            <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;loaded&#39;</span><span class="p">)</span>
            <span class="c1"># Transcriptor</span>
            <span class="n">transcriptor</span> <span class="o">=</span> <span class="n">PianoTranscription</span><span class="p">(</span><span class="n">device</span><span class="o">=</span><span class="s1">&#39;cuda&#39;</span><span class="p">,</span> <span class="n">checkpoint_path</span><span class="o">=</span><span class="n">checkpoint_path</span><span class="p">)</span>  <span class="c1"># &#39;cuda&#39; | &#39;cpu&#39;</span>
            <span class="n">fname</span><span class="o">=</span><span class="n">fp</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\\</span><span class="s1">&#39;</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
            <span class="nb">print</span><span class="p">(</span><span class="n">fname</span><span class="o">+</span><span class="s1">&#39; is processing...&#39;</span><span class="p">)</span>
            <span class="c1"># Transcribe and write out to MIDI file</span>
            <span class="n">output_file</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getcwd</span><span class="p">()</span><span class="o">+</span><span class="s1">&#39;</span><span class="se">\\</span><span class="s1">py</span><span class="se">\\</span><span class="s1">output</span><span class="se">\\</span><span class="s1">&#39;</span> <span class="o">+</span> <span class="n">fname</span> <span class="o">+</span> <span class="s1">&#39;.mid&#39;</span>
            <span class="n">transcribed_dict</span> <span class="o">=</span> <span class="n">transcriptor</span><span class="o">.</span><span class="n">transcribe</span><span class="p">(</span><span class="n">audio</span><span class="p">,</span> <span class="n">output_file</span><span class="p">)</span>  <span class="c1"># 设置输出路径（文件名）</span>
            <span class="k">return</span> <span class="n">output_file</span>

        <span class="n">dic</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">dic</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">path</span> <span class="ow">in</span> <span class="n">dic</span><span class="p">[</span><span class="s2">&#34;paths&#34;</span><span class="p">]:</span>
            <span class="n">output_files_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">mp32mid</span><span class="p">(</span><span class="n">path</span><span class="p">))</span>
        <span class="n">res</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">({</span><span class="s2">&#34;output_paths&#34;</span><span class="p">:</span><span class="n">output_files_list</span><span class="p">})</span>
        <span class="k">return</span> <span class="n">res</span>

        <span class="k">return</span> <span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">res</span><span class="si">}</span><span class="s1">&#39;</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
    <span class="n">port</span> <span class="o">=</span> <span class="mi">8000</span>
    <span class="n">ip</span> <span class="o">=</span> <span class="s2">&#34;127.0.0.1&#34;</span>
    <span class="c1"># 创建服务端</span>
    <span class="n">handler</span> <span class="o">=</span> <span class="n">Transcription</span><span class="p">()</span>  <span class="c1"># 自定义类</span>
    <span class="n">processor</span> <span class="o">=</span> <span class="n">TranscriptionService</span><span class="o">.</span><span class="n">Processor</span><span class="p">(</span><span class="n">handler</span><span class="p">)</span>  <span class="c1"># userService为python接口文件自动生成</span>
    <span class="c1"># 监听端口</span>
    <span class="n">transport</span> <span class="o">=</span> <span class="n">TSocket</span><span class="o">.</span><span class="n">TServerSocket</span><span class="p">(</span><span class="n">ip</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>  <span class="c1"># ip与port位置不可交换</span>
    <span class="c1"># 选择传输层</span>
    <span class="n">tfactory</span> <span class="o">=</span> <span class="n">TTransport</span><span class="o">.</span><span class="n">TBufferedTransportFactory</span><span class="p">()</span>
    <span class="c1"># 选择传输协议</span>
    <span class="n">pfactory</span> <span class="o">=</span> <span class="n">TBinaryProtocol</span><span class="o">.</span><span class="n">TBinaryProtocolFactory</span><span class="p">()</span>
    <span class="c1"># 创建服务端</span>
    <span class="n">server</span> <span class="o">=</span> <span class="n">TServer</span><span class="o">.</span><span class="n">TThreadedServer</span><span class="p">(</span><span class="n">processor</span><span class="p">,</span> <span class="n">transport</span><span class="p">,</span> <span class="n">tfactory</span><span class="p">,</span> <span class="n">pfactory</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;start server in python&#34;</span><span class="p">)</span>
    <span class="n">server</span><span class="o">.</span><span class="n">serve</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Done&#34;</span><span class="p">)</span>

</code></pre></td></tr></table>
</div>
</div><h2 id="thrift接口文件的生成">thrift接口文件的生成</h2>
<p>由于thrift接口连接两种语言，所以需要对接口进行定义</p>
<h2 id="transthrift">trans.thrift</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">service TranscriptionService {
    string music2mid(1:string name)
}
</code></pre></td></tr></table>
</div>
</div><p>然后使用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">thrift.exe -out ./gen_py -gen py  trans.thrift
<span class="s1">&#39;&#39;&#39;
</span><span class="s1">./gen_py
</span><span class="s1">│__init__.py
</span><span class="s1">│
</span><span class="s1">└trans
</span><span class="s1">   │  constants.py
</span><span class="s1">   │  TranscriptionService-remote
</span><span class="s1">   │  TranscriptionService.py
</span><span class="s1">   │  ttypes.py
</span><span class="s1">   └  __init__.py
</span><span class="s1">&#39;&#39;&#39;</span>
thrift.exe -out ./gen_nodejs --gen js:node  trans.thrift
<span class="s1">&#39;&#39;</span><span class="err">&#39;</span>
./gen_nodejs
├─TranscriptionService.js
└─trans_types.js
</code></pre></td></tr></table>
</div>
</div><p>生成对应语言的接口程序供调用
Python中的调用：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.server import TServer
</code></pre></td></tr></table>
</div>
</div><p>Electron(node.js)中的调用：
JavaScript中的调用：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">thrift</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;thrift&#39;</span><span class="p">);</span>
<span class="c1">// 调用win10下thrift命令自动生成的依赖包
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">TranscriptionService</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./gen-nodejs/TranscriptionService.js&#39;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">ttypes</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./gen-nodejs/trans_types.js&#39;</span><span class="p">);</span>
<span class="c1">// thrift 通信会占用一个本地端口
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">thriftConnection</span> <span class="o">=</span> <span class="nx">thrift</span><span class="p">.</span><span class="nx">createConnection</span><span class="p">(</span><span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="mi">8000</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">thriftClient</span> <span class="o">=</span> <span class="nx">thrift</span><span class="p">.</span><span class="nx">createClient</span><span class="p">(</span><span class="nx">TranscriptionService</span><span class="p">,</span><span class="nx">thriftConnection</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>青海行</title>
    <link>http://imzifeng.cn/posts/qinghai/</link>
    <pubDate>Tue, 13 Jul 2021 17:53:30 &#43;0800</pubDate><author>
        <name>zifeng</name>
    </author><guid>http://imzifeng.cn/posts/qinghai/</guid>
    <description><![CDATA[<h3 id="路线图">路线图</h3>
<div class="mermaid" id="id-1"></div>
<h3 id="第一天-717">第一天 7/17</h3>
<div class="mapbox" id="id-2" style="width: 100%; height: 20rem;"></div>
<p>下午2时降落，乘车到市区，入住酒店（）
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw"></i>必要事项<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>联系司机，车辆</p>
<p>购买物资：水，干粮、其他防护器具、防晒等</p>
</div>
        </div>
    </div></p>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>可选市内景点<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>饮食：莫家街和饮马街</p>
<p>夜景，地标建筑：浦宁之珠</p>
</div>
        </div>
    </div>
<h3 id="第二天-718">第二天 7/18</h3>
<p>西宁出发，前往塔尔寺
<div class="mapbox" id="id-3" style="width: 100%; height: 20rem;"></div>
拉脊山
<div class="mapbox" id="id-4" style="width: 100%; height: 20rem;"></div>
青海湖
<div class="mapbox" id="id-5" style="width: 100%; height: 20rem;"></div>
茶卡镇
<div class="mapbox" id="id-6" style="width: 100%; height: 20rem;"></div></p>
<h3 id="第三天-719">第三天 7/19</h3>
]]></description>
</item><item>
    <title>眼镜新鸟的经验谈</title>
    <link>http://imzifeng.cn/posts/glass/</link>
    <pubDate>Mon, 12 Jul 2021 21:21:52 &#43;0800</pubDate><author>
        <name>zifeng</name>
    </author><guid>http://imzifeng.cn/posts/glass/</guid>
    <description><![CDATA[<h3 id="前言">前言</h3>
<p>19年4月19日，陪伴我多年的变色眼镜终于光荣退役了，在镜框的纵容下，左眼镜片选择结束自己的使命奔向了自由。</p>
<p>这是我的第三副眼镜，当时心血来潮选择的变色片，变色片虽然用着舒服，但是因为如下原因不太想用第二次：</p>
<ol>
<li>镜片变色取决于紫外线强度，所以，开车没用（挡风玻璃有过滤紫外线作用），下雨天或者阴天却有可能变色，你能想到在一个阴郁的傍晚看一个戴墨镜的人有多傻叼吗？</li>
<li>墨镜自带一丢丢的装逼属性，虽然很多时候都是为了眼睛舒服，别人觉得装逼就装吧，反正戴上墨镜别人认不出（还可以遮挡视线看可爱的小姐姐），但是，变色片不一样，它会变色，但是却不会像墨镜那样黑，别人还是能看见你，认出你（还挡不了视线）。所以你有时会看到走在路上别人会看你，毕竟变色片还不是特别主流。</li>
<li>变色片恢复时间还是比较长，突然从阳光下进入室内会很不适应，相当于室内戴墨镜你还没法取，而且如果在眼镜还是半黑的情况下去见长辈或者老师感觉很不礼貌</li>
</ol>
<p>变色片就当是个玩具，如果有长时间的室外工作需求还是可以弄一副，比墨镜还是方便一点，虽然没有墨镜帅。</p>
<p>高度近视患者没有备用镜，简直生活都没办法自理，虽然我还有一个争气的右眼200度能撑一下，之前一直觉得眼镜是个暴利行业，一副普普通通的框一堆名词忽悠来就敢买一两千，毛利率甚至超过95%，但是看了一个“挺着暴利光环挣扎在温饱线上的眼镜店主”写的帖子，对这个行业有了不一样的看法，眼镜确实是单品利率高，但是店铺利率低，为什么？卖的少啊，眼镜又不像手机，隔一两年还搞个更新换代，如果不是出什么问题或者度数猛涨，一般人戴个十年八年没有任何问题，很多店撑死两三天卖一副，水电气加房租一减，维持温饱还是很轻松，真不是别人想坑你钱，实在是运营模式下没办法。</p>
<p>有人一听好耳熟，水电房租这好办，网购啊，网店不就是摆脱了这些固定成本吗？其实尝试的人还真不少，国内几家大牌都有网上商城，但是眼镜作为一个定制化程度极高的产品，在网购中处处水土不服。验光问题&ndash;要去医院，选框问题&ndash;好吧别人寄几幅您挑，挑好了还得给别人退回去，然后都选妥了别人再工厂生产完给您寄过去，一来二去大半个月就没了，我还不如直接去街上找家眼镜店呢。</p>
<p>这次配镜和以前不一样，大学里终于有充足的时间去配一副眼镜了，不像以前老妈带着，火速完事儿。在网上查资料做了很多功课，算是小有心得，在这里做个分享记录。</p>
<h3 id="快时尚品牌">“快时尚品牌”？</h3>
<p>眼镜行业发展到现在，还有突破的可能吗？</p>
<p>还真有，既然实体店面临成本高风险等压力，还是可以沿用互联网那一套，定位年轻市场，重设计，打造网红体验，走量来保证利率。所以一批“快时尚”品牌迅速兴起，以&quot;快、狠、准&quot;为主要特征，换成直接体验就是店铺的装修时尚气息浓厚、购物氛围自由、服务贴心；其次，产品时尚潮流度较高，更新速度快，同时价格亲民，不会像普通眼镜店那样一直有一个店员跟着你碎碎念（社恐噩梦），镜架不会锁在玻璃柜子里而是摆在货架上可以随意试戴，有需要店员也会给你一些建议，体验好了不少。目前国内比较火的快时尚品牌有JINS(睛姿)、LOHO眼镜生活、木九十、ZOFF(佐芙)、Aojo(艾镜)、EXE镜自由、eGG、URAKU(乐顾)、Zele、LookOptical等。</p>
<p>在小红书和什么值得买上，Jins可以说是众人的心头好，具体购买帖自己去搜，不在累述。定位年轻和高性价比的标签深得我心，所以就选它家的眼镜了，先是打算网购，但是没有办法试戴让我这个脸形不好撘的人知难而退。一搜发现成都的店面还真不太少，大概有七八家，选了从图片上看店面最大的环球中心店。</p>
<p>环球中心巨无霸的体积着实让我这个处于半失明状态的人找了好一阵，到了店门口就发现和外面那些妖艳贱货果然不一样，和周围的时装大牌完美融为一体，温馨的装修和开放的镜架让一些不打算配镜的人都有进去逛逛的冲动。</p>
<p>最后在店员小姐姐的推荐下选了一个999的钛框，考虑到左眼500的度数,加300元上了1.67，搞活动再优惠一百，到手价1199.由于需要定制镜片，5-7天后才能取镜或者邮寄，开箱图待补</p>
<p>下面是重点，在近几年一些媒体的刻意引导下，消费者和商家之间的信息不对等被刻意放大，很多人都觉得“商家的嘴，骗人的鬼”，当然一些无良商家也对造成这样的局面功不可没，我还是相信世界上还是好人多，有些商家还是会很贴心地帮你选择商品的，如果你还是觉得不太保险，那么最好的办法就是消除问题的根源&ndash;信息不平等，如果你能够分辨出商家嘴里每个晦涩难懂的词语的意思，那再没人能够骗到你。</p>
<h3 id="156-160-167">1.56? 1.60? 1.67？</h3>
<p>眼镜是通过折射改变入射光线，从而使外界的光线能够在视网膜上清晰成像，以达到矫正视力的目的。每人需要矫正的程度，或者说近视（远视）的度数不一样，通过改变镜片的形状或者折射率就可以实现不同的矫正度数。而商家在选择镜片时所说的1.56\1.67就是指的镜片折射率，一般来说，折射率越高，镜片就越薄，随之重量下降和美观度也会提升。但对于低度数的同学来说，不同折射率之间的镜片薄厚差距微乎其微，而价格之间的差距就比较大了。高折射率的优势只有在高倍镜中才能体现出来。</p>
<p>1、100度以下的近视或平光，或者100度以下的远视，建议选择1.50折射率的镜片；</p>
<p>2、100~300度的近视，或者100~300度以下的远视，建议选择1.56折射率的镜片；</p>
<p>3、300~600度的近视，或者300度~600度以下的远视，建议选择1.60折射率的镜片；</p>
<p>4、600~800度的近视，建议选择1.67折射率的镜片；</p>
<p>5、800度以上的近视，建议选择1.74折射率的镜片。</p>
<h3 id="阿贝数">阿贝数？</h3>
<p>可能有的同学会想，我有钱，任性，虽然我度数不高，但是我就要选最贵的1.74折射率，那减少的零点几克重量对本仙女很重要。这样选择并不理智，这就涉及到一个商家往往不会告诉你的参数&ndash;阿贝数（色散系数）。</p>
<p>先来复习一下高中物理&mdash;同种介质对不同波长的光有不同的折射率。通过这个原理，我们可以造出三棱镜，将不同波长的光分开，衡量这种能力的指标就是阿贝数，色散现象在眼镜中同样存在，一些高度近视的朋友在通过眼镜边缘看物体时有时会发现物体边缘有蓝边，这就是发生了色散。色散程度越低，成像的效果越好，不同折射率的眼镜阿贝数参考如下</p>
<p></p>
<p>总体来说，1.50折射率的镜片的阿贝数可以达到58，但是一旦用到1.74折射率超超薄以上等级的镜片时，阿贝数会下降到32~36。所以，有好就有坏。如果一味追求镜片的薄，那么就会牺牲镜片的阿贝数，也就是降低了视觉对于颜色的真实感受，以及舒适度。</p>
]]></description>
</item></channel>
</rss>
